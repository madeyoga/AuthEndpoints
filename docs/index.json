{
  "api/AuthEndpoints.Core.AuthEndpointsBuilder.html": {
    "href": "api/AuthEndpoints.Core.AuthEndpointsBuilder.html",
    "title": "Class AuthEndpointsBuilder | AuthEndpoints",
    "keywords": "Class AuthEndpointsBuilder Helper functions for configuring AuthEndpoints services. Inheritance System.Object AuthEndpointsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core Assembly : AuthEndpoints.Core.dll Syntax public class AuthEndpointsBuilder Constructors | Improve this Doc View Source AuthEndpointsBuilder(Type, Type, IServiceCollection) Creates a new instance of AuthEndpointsBuilder . Declaration public AuthEndpointsBuilder(Type userKeyType, Type userType, IServiceCollection services) Parameters Type Name Description Type userKeyType Type userType The type to use for the users. Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to attach to. Properties | Improve this Doc View Source Services Gets the Microsoft.Extensions.DependencyInjection.IServiceCollection services are attached to. Declaration public IServiceCollection Services { get; } Property Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The Microsoft.Extensions.DependencyInjection.IServiceCollection services are attached to. | Improve this Doc View Source UserKeyType Gets the type used for user id. Declaration public Type UserKeyType { get; } Property Value Type Description Type The type used for user id. | Improve this Doc View Source UserType Gets the type used for users. Declaration public Type UserType { get; } Property Value Type Description Type The type used for users. Methods | Improve this Doc View Source AddAuthenticator<TAuthenticator>() Adds an IAuthenticator<TUser> . Declaration public virtual AuthEndpointsBuilder AddAuthenticator<TAuthenticator>() where TAuthenticator : class Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TAuthenticator The type of the authenticator. | Improve this Doc View Source AddEmailFactory<TEmailFactory>() Adds an IEmailFactory Declaration public virtual AuthEndpointsBuilder AddEmailFactory<TEmailFactory>() where TEmailFactory : IEmailFactory Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TEmailFactory | Improve this Doc View Source AddEmailSender<TSender>() Adds an IEmailSender Declaration public virtual AuthEndpointsBuilder AddEmailSender<TSender>() where TSender : IEmailSender Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TSender | Improve this Doc View Source AddEndpointDefinition(Type) Add endpoint definition Declaration public virtual AuthEndpointsBuilder AddEndpointDefinition(Type definitionType) Parameters Type Name Description Type definitionType Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. | Improve this Doc View Source AddEndpointDefinition<TEndpointDefinition>() Add endpoint definition Declaration public virtual AuthEndpointsBuilder AddEndpointDefinition<TEndpointDefinition>() where TEndpointDefinition : IEndpointDefinition Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TEndpointDefinition | Improve this Doc View Source AddErrorDescriber<TDescriber>() Adds an Microsoft.AspNetCore.Identity.IdentityErrorDescriber . Declaration public virtual AuthEndpointsBuilder AddErrorDescriber<TDescriber>() where TDescriber : IdentityErrorDescriber Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TDescriber The type of the error describer. | Improve this Doc View Source AddScoped(Type, Type) Declaration protected AuthEndpointsBuilder AddScoped(Type serviceType, Type concreteType) Parameters Type Name Description Type serviceType Type concreteType Returns Type Description AuthEndpointsBuilder Extension Methods AuthEndpointsBuilderExtensions.AddBasicAuthenticationEndpoints(AuthEndpointsBuilder) AuthEndpointsBuilderExtensions.AddUsersApiEndpoints(AuthEndpointsBuilder) AuthEndpointsBuilderExtensions.Add2FAEndpoints(AuthEndpointsBuilder)"
  },
  "api/AuthEndpoints.Core.AuthEndpointsOptions.html": {
    "href": "api/AuthEndpoints.Core.AuthEndpointsOptions.html",
    "title": "Class AuthEndpointsOptions | AuthEndpoints",
    "keywords": "Class AuthEndpointsOptions Represents all the options you can use to configure the AuthEndpoints system. Inheritance System.Object AuthEndpointsOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core Assembly : AuthEndpoints.Core.dll Syntax public class AuthEndpointsOptions Fields | Improve this Doc View Source Key Declaration public const string Key = \"AuthEndpoints\" Field Value Type Description System.String Properties | Improve this Doc View Source EmailConfirmationUrl URL to your frontend email verification page. Declaration public string EmailConfirmationUrl { get; set; } Property Value Type Description System.String | Improve this Doc View Source EmailOptions Email configuration used for sending reset password link or verification email link via email. Declaration public EmailOptions EmailOptions { get; set; } Property Value Type Description EmailOptions | Improve this Doc View Source PasswordResetUrl URL to your frontend password reset page. Declaration public string PasswordResetUrl { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.AuthEndpointsOptionsValidator.html": {
    "href": "api/AuthEndpoints.Core.AuthEndpointsOptionsValidator.html",
    "title": "Class AuthEndpointsOptionsValidator | AuthEndpoints",
    "keywords": "Class AuthEndpointsOptionsValidator Inheritance System.Object AuthEndpointsOptionsValidator Implements Microsoft.Extensions.Options.IValidateOptions < AuthEndpointsOptions > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core Assembly : AuthEndpoints.Core.dll Syntax public class AuthEndpointsOptionsValidator : IValidateOptions<AuthEndpointsOptions> Constructors | Improve this Doc View Source AuthEndpointsOptionsValidator(ILogger) Declaration public AuthEndpointsOptionsValidator(ILogger logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger Methods | Improve this Doc View Source Validate(String, AuthEndpointsOptions) Declaration public ValidateOptionsResult Validate(string name, AuthEndpointsOptions options) Parameters Type Name Description System.String name AuthEndpointsOptions options Returns Type Description Microsoft.Extensions.Options.ValidateOptionsResult Implements Microsoft.Extensions.Options.IValidateOptions<TOptions>"
  },
  "api/AuthEndpoints.Core.Contracts.ConfirmEmailRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.ConfirmEmailRequest.html",
    "title": "Class ConfirmEmailRequest | AuthEndpoints",
    "keywords": "Class ConfirmEmailRequest The dto used for email confirmation request Inheritance System.Object ConfirmEmailRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class ConfirmEmailRequest Properties | Improve this Doc View Source Identity Declaration [Required] public string Identity { get; set; } Property Value Type Description System.String | Improve this Doc View Source Token Declaration [Required] public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.ErrorResponse.html": {
    "href": "api/AuthEndpoints.Core.Contracts.ErrorResponse.html",
    "title": "Class ErrorResponse | AuthEndpoints",
    "keywords": "Class ErrorResponse The dto used to send an error response to the client Inheritance System.Object ErrorResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class ErrorResponse Constructors | Improve this Doc View Source ErrorResponse(IEnumerable<String>) instantiate a new error response with the given list of error messages Declaration public ErrorResponse(IEnumerable<string> errors) Parameters Type Name Description IEnumerable < System.String > errors | Improve this Doc View Source ErrorResponse(String) instantiate a new error response with the given error message Declaration public ErrorResponse(string errorMessage) Parameters Type Name Description System.String errorMessage Properties | Improve this Doc View Source Errors Declaration public IEnumerable<string> Errors { get; set; } Property Value Type Description IEnumerable < System.String >"
  },
  "api/AuthEndpoints.Core.Contracts.html": {
    "href": "api/AuthEndpoints.Core.Contracts.html",
    "title": "Namespace AuthEndpoints.Core.Contracts | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.Core.Contracts Classes ConfirmEmailRequest The dto used for email confirmation request ErrorResponse The dto used to send an error response to the client LoginRequest The dto used for login request RefreshRequest the dto used for refresh request RegisterRequest the dto used for registration request ResetPasswordConfirmRequest The dto used for reset password confirmation request ResetPasswordRequest The dto used for reset password request SetPasswordRequest the dto used for set password request SetUsernameRequest the dto used for set username request TwoStepVerificationConfirmRequest TwoStepVerificationLoginRequest VerifyRequest the dto used for verify request"
  },
  "api/AuthEndpoints.Core.Contracts.LoginRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.LoginRequest.html",
    "title": "Class LoginRequest | AuthEndpoints",
    "keywords": "Class LoginRequest The dto used for login request Inheritance System.Object LoginRequest TwoStepVerificationLoginRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class LoginRequest Properties | Improve this Doc View Source Password Declaration [Required] public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Username Declaration [Required] public string Username { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.RefreshRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.RefreshRequest.html",
    "title": "Class RefreshRequest | AuthEndpoints",
    "keywords": "Class RefreshRequest the dto used for refresh request Inheritance System.Object RefreshRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class RefreshRequest Properties | Improve this Doc View Source RefreshToken Declaration [Required] public string RefreshToken { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.RegisterRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.RegisterRequest.html",
    "title": "Class RegisterRequest | AuthEndpoints",
    "keywords": "Class RegisterRequest the dto used for registration request Inheritance System.Object RegisterRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class RegisterRequest Properties | Improve this Doc View Source ConfirmPassword Declaration [Required] public string ConfirmPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source Email Declaration [Required] [EmailAddress] public string Email { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Declaration [Required] public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Username Declaration [Required] public string Username { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.ResetPasswordConfirmRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.ResetPasswordConfirmRequest.html",
    "title": "Class ResetPasswordConfirmRequest | AuthEndpoints",
    "keywords": "Class ResetPasswordConfirmRequest The dto used for reset password confirmation request Inheritance System.Object ResetPasswordConfirmRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class ResetPasswordConfirmRequest Properties | Improve this Doc View Source ConfirmNewPassword Declaration [Required] public string ConfirmNewPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source Identity Declaration [Required] public string Identity { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewPassword Declaration [Required] public string NewPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source Token Declaration [Required] public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.ResetPasswordRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.ResetPasswordRequest.html",
    "title": "Class ResetPasswordRequest | AuthEndpoints",
    "keywords": "Class ResetPasswordRequest The dto used for reset password request Inheritance System.Object ResetPasswordRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class ResetPasswordRequest Properties | Improve this Doc View Source Email Declaration [Required] [EmailAddress] public string Email { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.SetPasswordRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.SetPasswordRequest.html",
    "title": "Class SetPasswordRequest | AuthEndpoints",
    "keywords": "Class SetPasswordRequest the dto used for set password request Inheritance System.Object SetPasswordRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class SetPasswordRequest Properties | Improve this Doc View Source ConfirmNewPassword Declaration [Required] public string ConfirmNewPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source CurrentPassword Declaration [Required] public string CurrentPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewPassword Declaration [Required] public string NewPassword { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.SetUsernameRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.SetUsernameRequest.html",
    "title": "Class SetUsernameRequest | AuthEndpoints",
    "keywords": "Class SetUsernameRequest the dto used for set username request Inheritance System.Object SetUsernameRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class SetUsernameRequest Properties | Improve this Doc View Source CurrentPassword Declaration public string CurrentPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewUsername Declaration public string NewUsername { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.TwoStepVerificationConfirmRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.TwoStepVerificationConfirmRequest.html",
    "title": "Class TwoStepVerificationConfirmRequest | AuthEndpoints",
    "keywords": "Class TwoStepVerificationConfirmRequest Inheritance System.Object TwoStepVerificationConfirmRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class TwoStepVerificationConfirmRequest Properties | Improve this Doc View Source Email Declaration [Required] public string Email { get; set; } Property Value Type Description System.String | Improve this Doc View Source Provider Declaration [Required] public string Provider { get; set; } Property Value Type Description System.String | Improve this Doc View Source Token Declaration [Required] public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.TwoStepVerificationLoginRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.TwoStepVerificationLoginRequest.html",
    "title": "Class TwoStepVerificationLoginRequest | AuthEndpoints",
    "keywords": "Class TwoStepVerificationLoginRequest Inheritance System.Object LoginRequest TwoStepVerificationLoginRequest Inherited Members LoginRequest.Username LoginRequest.Password System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class TwoStepVerificationLoginRequest : LoginRequest Properties | Improve this Doc View Source Provider Declaration [Required] public string Provider { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.Contracts.VerifyRequest.html": {
    "href": "api/AuthEndpoints.Core.Contracts.VerifyRequest.html",
    "title": "Class VerifyRequest | AuthEndpoints",
    "keywords": "Class VerifyRequest the dto used for verify request Inheritance System.Object VerifyRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Contracts Assembly : AuthEndpoints.Core.dll Syntax public class VerifyRequest Properties | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.EmailOptions.html": {
    "href": "api/AuthEndpoints.Core.EmailOptions.html",
    "title": "Class EmailOptions | AuthEndpoints",
    "keywords": "Class EmailOptions Represents all the options you can use to configure the Email backend Inheritance System.Object EmailOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core Assembly : AuthEndpoints.Core.dll Syntax public class EmailOptions Properties | Improve this Doc View Source From Declaration public string From { get; set; } Property Value Type Description System.String | Improve this Doc View Source Host Declaration public string Host { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Port Declaration public int Port { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source User Declaration public string User { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Core.html": {
    "href": "api/AuthEndpoints.Core.html",
    "title": "Namespace AuthEndpoints.Core | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.Core Classes AuthEndpointsBuilder Helper functions for configuring AuthEndpoints services. AuthEndpointsOptions Represents all the options you can use to configure the AuthEndpoints system. AuthEndpointsOptionsValidator EmailOptions Represents all the options you can use to configure the Email backend ServiceCollectionExtensions Provides extensions to easily bootstrap authendpoints TypeHelper Use this static class to find genericBaseType of currentType WebApplicationExtensions Provides extension to easily map IEndpointDefinition Interfaces IEndpointDefinition Implements IEndpointDefinition to define your endpoint definition."
  },
  "api/AuthEndpoints.Core.IEndpointDefinition.html": {
    "href": "api/AuthEndpoints.Core.IEndpointDefinition.html",
    "title": "Interface IEndpointDefinition | AuthEndpoints",
    "keywords": "Interface IEndpointDefinition Implements IEndpointDefinition to define your endpoint definition. Namespace : AuthEndpoints.Core Assembly : AuthEndpoints.Core.dll Syntax public interface IEndpointDefinition Methods | Improve this Doc View Source MapEndpoints(WebApplication) Use this method to define your minimal api(s). This method will be called by MapEndpoints(WebApplication) . Declaration void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app"
  },
  "api/AuthEndpoints.Core.Models.EmailData.html": {
    "href": "api/AuthEndpoints.Core.Models.EmailData.html",
    "title": "Class EmailData | AuthEndpoints",
    "keywords": "Class EmailData The dto used for creating an MimeMessage object by IEmailFactory Inheritance System.Object EmailData Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Models Assembly : AuthEndpoints.Core.dll Syntax public class EmailData Constructors | Improve this Doc View Source EmailData(IEnumerable<String>, String, String) Declaration public EmailData(IEnumerable<string> to, string subject, string link) Parameters Type Name Description IEnumerable < System.String > to System.String subject System.String link Properties | Improve this Doc View Source Link Declaration public string Link { get; set; } Property Value Type Description System.String | Improve this Doc View Source Subject Declaration public string Subject { get; set; } Property Value Type Description System.String | Improve this Doc View Source To Declaration public List<MailboxAddress> To { get; set; } Property Value Type Description List < MimeKit.MailboxAddress >"
  },
  "api/AuthEndpoints.Core.Models.html": {
    "href": "api/AuthEndpoints.Core.Models.html",
    "title": "Namespace AuthEndpoints.Core.Models | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.Core.Models Classes EmailData The dto used for creating an MimeMessage object by IEmailFactory"
  },
  "api/AuthEndpoints.Core.ServiceCollectionExtensions.html": {
    "href": "api/AuthEndpoints.Core.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | AuthEndpoints",
    "keywords": "Class ServiceCollectionExtensions Provides extensions to easily bootstrap authendpoints Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core Assembly : AuthEndpoints.Core.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddAuthEndpointsCore<TUser, TContext>(IServiceCollection) Adds the AuthEndpoints core services Declaration public static AuthEndpointsBuilder AddAuthEndpointsCore<TUser, TContext>(this IServiceCollection services) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description AuthEndpointsBuilder An AuthEndpointsBuilder for creating and configuring the AuthEndpoints system. Type Parameters Name Description TUser TContext | Improve this Doc View Source AddAuthEndpointsCore<TUser, TContext>(IServiceCollection, Action<AuthEndpointsOptions>) Adds and configures the AuthEndpoints core system. Declaration public static AuthEndpointsBuilder AddAuthEndpointsCore<TUser, TContext>(this IServiceCollection services, Action<AuthEndpointsOptions> setup) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The services available in the application. Action < AuthEndpointsOptions > setup An action to configure the AuthEndpointsOptions . Returns Type Description AuthEndpointsBuilder An AuthEndpointsBuilder for creating and configuring the AuthEndpoints system. Type Parameters Name Description TUser The type representing a User in the system. TContext | Improve this Doc View Source AddEndpointDefinition(IServiceCollection, Type) Add endpoint definition Declaration public static IServiceCollection AddEndpointDefinition(this IServiceCollection services, Type definitionType) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Type definitionType Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The current AuthEndpointsBuilder instance. | Improve this Doc View Source AddEndpointDefinition<TEndpointDefinition>(IServiceCollection) Add endpoint definition Declaration public static IServiceCollection AddEndpointDefinition<TEndpointDefinition>(this IServiceCollection services) where TEndpointDefinition : IEndpointDefinition Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The current AuthEndpointsBuilder instance. Type Parameters Name Description TEndpointDefinition"
  },
  "api/AuthEndpoints.Core.Services.DefaultAuthenticator-1.html": {
    "href": "api/AuthEndpoints.Core.Services.DefaultAuthenticator-1.html",
    "title": "Class DefaultAuthenticator<TUser> | AuthEndpoints",
    "keywords": "Class DefaultAuthenticator<TUser> Default authenticator. Inheritance System.Object DefaultAuthenticator<TUser> Implements IAuthenticator <TUser> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultAuthenticator<TUser> : IAuthenticator<TUser> where TUser : class Type Parameters Name Description TUser Constructors | Improve this Doc View Source DefaultAuthenticator(UserManager<TUser>) Declaration public DefaultAuthenticator(UserManager<TUser> userManager) Parameters Type Name Description Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Methods | Improve this Doc View Source Authenticate(String, String) Use this method to verify a set of credentials. It takes credentials as argument, username and password for the default case. Declaration public async Task<TUser> Authenticate(string username, string password) Parameters Type Name Description System.String username System.String password Returns Type Description Task <TUser> An instance of TUser if credentials are valid Implements IAuthenticator<TUser>"
  },
  "api/AuthEndpoints.Core.Services.DefaultEmailSender.html": {
    "href": "api/AuthEndpoints.Core.Services.DefaultEmailSender.html",
    "title": "Class DefaultEmailSender | AuthEndpoints",
    "keywords": "Class DefaultEmailSender Use this class to send an email using smtp client configured by EmailOptions . Inheritance System.Object DefaultEmailSender Implements IEmailSender Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultEmailSender : IEmailSender Constructors | Improve this Doc View Source DefaultEmailSender(IOptions<AuthEndpointsOptions>) Declaration public DefaultEmailSender(IOptions<AuthEndpointsOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options Methods | Improve this Doc View Source SendEmail(MimeMessage) Declaration public void SendEmail(MimeMessage message) Parameters Type Name Description MimeKit.MimeMessage message | Improve this Doc View Source SendEmailAsync(MimeMessage) Declaration public async Task SendEmailAsync(MimeMessage message) Parameters Type Name Description MimeKit.MimeMessage message Returns Type Description Task Implements IEmailSender"
  },
  "api/AuthEndpoints.Core.Services.DefaultMessageFactory.html": {
    "href": "api/AuthEndpoints.Core.Services.DefaultMessageFactory.html",
    "title": "Class DefaultMessageFactory | AuthEndpoints",
    "keywords": "Class DefaultMessageFactory Use this class to create MimeMessage for email verification request and for reset password request. Inheritance System.Object DefaultMessageFactory Implements IEmailFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultMessageFactory : IEmailFactory Constructors | Improve this Doc View Source DefaultMessageFactory(IOptions<AuthEndpointsOptions>) Declaration public DefaultMessageFactory(IOptions<AuthEndpointsOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options Methods | Improve this Doc View Source Create2faEmail(EmailData) Declaration public MimeMessage Create2faEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateConfirmationEmail(EmailData) Use this method to create MimeMessage for email verification request Declaration public MimeMessage CreateConfirmationEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage a instance of MimeMessage | Improve this Doc View Source CreateEnable2faEmail(EmailData) Declaration public MimeMessage CreateEnable2faEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateResetPasswordEmail(EmailData) Use this method to create MimeMessage for reset password request Declaration public MimeMessage CreateResetPasswordEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage a instance of MimeMessage Implements IEmailFactory"
  },
  "api/AuthEndpoints.Core.Services.html": {
    "href": "api/AuthEndpoints.Core.Services.html",
    "title": "Namespace AuthEndpoints.Core.Services | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.Core.Services Classes DefaultAuthenticator<TUser> Default authenticator. DefaultEmailSender Use this class to send an email using smtp client configured by EmailOptions . DefaultMessageFactory Use this class to create MimeMessage for email verification request and for reset password request. Interfaces IAuthenticator<TUser> Implements IAuthenticator<TUser> to define your authenticator IEmailFactory IEmailSender ILoginService"
  },
  "api/AuthEndpoints.Core.Services.IAuthenticator-1.html": {
    "href": "api/AuthEndpoints.Core.Services.IAuthenticator-1.html",
    "title": "Interface IAuthenticator<TUser> | AuthEndpoints",
    "keywords": "Interface IAuthenticator<TUser> Implements IAuthenticator<TUser> to define your authenticator Namespace : AuthEndpoints.Core.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IAuthenticator<TUser> where TUser : class Type Parameters Name Description TUser Methods | Improve this Doc View Source Authenticate(String, String) Implements this method to verify a set of credentials, username and password for the default case Declaration Task<TUser> Authenticate(string username, string password) Parameters Type Name Description System.String username System.String password Returns Type Description Task <TUser> An instance of TUser if credentials are valid, else return null"
  },
  "api/AuthEndpoints.Core.Services.IEmailFactory.html": {
    "href": "api/AuthEndpoints.Core.Services.IEmailFactory.html",
    "title": "Interface IEmailFactory | AuthEndpoints",
    "keywords": "Interface IEmailFactory Namespace : AuthEndpoints.Core.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IEmailFactory Methods | Improve this Doc View Source Create2faEmail(EmailData) Declaration MimeMessage Create2faEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateConfirmationEmail(EmailData) Declaration MimeMessage CreateConfirmationEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateEnable2faEmail(EmailData) Declaration MimeMessage CreateEnable2faEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateResetPasswordEmail(EmailData) Declaration MimeMessage CreateResetPasswordEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage"
  },
  "api/AuthEndpoints.Core.Services.IEmailSender.html": {
    "href": "api/AuthEndpoints.Core.Services.IEmailSender.html",
    "title": "Interface IEmailSender | AuthEndpoints",
    "keywords": "Interface IEmailSender Namespace : AuthEndpoints.Core.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IEmailSender Methods | Improve this Doc View Source SendEmail(MimeMessage) Declaration void SendEmail(MimeMessage message) Parameters Type Name Description MimeKit.MimeMessage message | Improve this Doc View Source SendEmailAsync(MimeMessage) Declaration Task SendEmailAsync(MimeMessage message) Parameters Type Name Description MimeKit.MimeMessage message Returns Type Description Task"
  },
  "api/AuthEndpoints.Core.Services.ILoginService.html": {
    "href": "api/AuthEndpoints.Core.Services.ILoginService.html",
    "title": "Interface ILoginService | AuthEndpoints",
    "keywords": "Interface ILoginService Namespace : AuthEndpoints.Core.Services Assembly : AuthEndpoints.Core.dll Syntax public interface ILoginService Methods | Improve this Doc View Source LoginAsync(ClaimsPrincipal) Declaration Task<object> LoginAsync(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description Task < System.Object >"
  },
  "api/AuthEndpoints.Core.TypeHelper.html": {
    "href": "api/AuthEndpoints.Core.TypeHelper.html",
    "title": "Class TypeHelper | AuthEndpoints",
    "keywords": "Class TypeHelper Use this static class to find genericBaseType of currentType Inheritance System.Object TypeHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core Assembly : AuthEndpoints.Core.dll Syntax public static class TypeHelper Methods | Improve this Doc View Source FindGenericBaseType(Type, Type) Declaration public static Type? FindGenericBaseType(Type currentType, Type genericBaseType) Parameters Type Name Description Type currentType Type genericBaseType Returns Type Description System.Nullable < Type > | Improve this Doc View Source FindKeyType(Type) Declaration public static Type? FindKeyType(Type userType) Parameters Type Name Description Type userType Returns Type Description System.Nullable < Type >"
  },
  "api/AuthEndpoints.Core.WebApplicationExtensions.html": {
    "href": "api/AuthEndpoints.Core.WebApplicationExtensions.html",
    "title": "Class WebApplicationExtensions | AuthEndpoints",
    "keywords": "Class WebApplicationExtensions Provides extension to easily map IEndpointDefinition Inheritance System.Object WebApplicationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Core Assembly : AuthEndpoints.Core.dll Syntax public static class WebApplicationExtensions Methods | Improve this Doc View Source MapAuthEndpoints(WebApplication) Declaration public static void MapAuthEndpoints(this WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public static void MapEndpoints(this WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app"
  },
  "api/AuthEndpoints.MinimalApi.AuthEndpointsBuilderExtensions.html": {
    "href": "api/AuthEndpoints.MinimalApi.AuthEndpointsBuilderExtensions.html",
    "title": "Class AuthEndpointsBuilderExtensions | AuthEndpoints",
    "keywords": "Class AuthEndpointsBuilderExtensions Provides extensions to easily add users api endpoints. Inheritance System.Object AuthEndpointsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public static class AuthEndpointsBuilderExtensions Methods | Improve this Doc View Source Add2FAEndpoints(AuthEndpointsBuilder) Add APIs for enabling user's Two Factor Authentication (via Email). Declaration public static AuthEndpointsBuilder Add2FAEndpoints(this AuthEndpointsBuilder builder) Parameters Type Name Description AuthEndpointsBuilder builder Returns Type Description AuthEndpointsBuilder | Improve this Doc View Source AddBasicAuthenticationEndpoints(AuthEndpointsBuilder) Declaration public static AuthEndpointsBuilder AddBasicAuthenticationEndpoints(this AuthEndpointsBuilder builder) Parameters Type Name Description AuthEndpointsBuilder builder Returns Type Description AuthEndpointsBuilder | Improve this Doc View Source AddUsersApiEndpoints(AuthEndpointsBuilder) Add APIs for creating, retrieving, updating, and deleting users. Declaration public static AuthEndpointsBuilder AddUsersApiEndpoints(this AuthEndpointsBuilder builder) Parameters Type Name Description AuthEndpointsBuilder builder Returns Type Description AuthEndpointsBuilder"
  },
  "api/AuthEndpoints.MinimalApi.html": {
    "href": "api/AuthEndpoints.MinimalApi.html",
    "title": "Namespace AuthEndpoints.MinimalApi | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.MinimalApi Classes AuthEndpointsBuilderExtensions Provides extensions to easily add users api endpoints. MinimalValidator TwoFactorEndpointDefinition<TKey, TUser> UsersEndpointDefinition<TKey, TUser> ValidationResult Interfaces IMinimalValidator"
  },
  "api/AuthEndpoints.MinimalApi.IMinimalValidator.html": {
    "href": "api/AuthEndpoints.MinimalApi.IMinimalValidator.html",
    "title": "Interface IMinimalValidator | AuthEndpoints",
    "keywords": "Interface IMinimalValidator Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public interface IMinimalValidator Methods | Improve this Doc View Source Validate<T>(T) Declaration ValidationResult Validate<T>(T model) Parameters Type Name Description T model Returns Type Description ValidationResult Type Parameters Name Description T"
  },
  "api/AuthEndpoints.MinimalApi.MinimalValidator.html": {
    "href": "api/AuthEndpoints.MinimalApi.MinimalValidator.html",
    "title": "Class MinimalValidator | AuthEndpoints",
    "keywords": "Class MinimalValidator Inheritance System.Object MinimalValidator Implements IMinimalValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class MinimalValidator : IMinimalValidator Methods | Improve this Doc View Source Validate<T>(T) Declaration public ValidationResult Validate<T>(T model) Parameters Type Name Description T model Returns Type Description ValidationResult Type Parameters Name Description T Implements IMinimalValidator"
  },
  "api/AuthEndpoints.MinimalApi.TwoFactorEndpointDefinition-2.html": {
    "href": "api/AuthEndpoints.MinimalApi.TwoFactorEndpointDefinition-2.html",
    "title": "Class TwoFactorEndpointDefinition<TKey, TUser> | AuthEndpoints",
    "keywords": "Class TwoFactorEndpointDefinition<TKey, TUser> Inheritance System.Object TwoFactorEndpointDefinition<TKey, TUser> Implements IEndpointDefinition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class TwoFactorEndpointDefinition<TKey, TUser> : IEndpointDefinition where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source EnableTwoStepVerification(HttpContext, UserManager<TUser>, IEmailFactory, IEmailSender) Use this endpoint to send email to user with 2fa token Declaration [Authorize(AuthenticationSchemes = \"Bearer\")] public virtual async Task<IResult> EnableTwoStepVerification(HttpContext context, UserManager<TUser> userManager, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source EnableTwoStepVerificationConfirm(TwoStepVerificationConfirmRequest, HttpContext, UserManager<TUser>) Use this endpoint to finish enable 2fa process. Declaration [Authorize(AuthenticationSchemes = \"Bearer\")] public virtual async Task<IResult> EnableTwoStepVerificationConfirm([FromBody] TwoStepVerificationConfirmRequest request, HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description TwoStepVerificationConfirmRequest request Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public virtual void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app | Improve this Doc View Source TwoStepVerificationConfirm(TwoStepVerificationConfirmRequest, UserManager<TUser>, IUserClaimsPrincipalFactory<TUser>, ILoginService) Use this endpoint to finish two step verification login process. Declaration public virtual async Task<IResult> TwoStepVerificationConfirm([FromBody] TwoStepVerificationConfirmRequest request, UserManager<TUser> userManager, IUserClaimsPrincipalFactory<TUser> claimsFactory, ILoginService loginService) Parameters Type Name Description TwoStepVerificationConfirmRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory <TUser> claimsFactory ILoginService loginService Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source TwoStepVerificationLogin(TwoStepVerificationLoginRequest, IAuthenticator<TUser>, UserManager<TUser>, IEmailFactory, IEmailSender) Use this endpoint to login with 2fa process Declaration public virtual async Task<IResult> TwoStepVerificationLogin([FromBody] TwoStepVerificationLoginRequest request, IAuthenticator<TUser> authenticator, UserManager<TUser> userManager, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description TwoStepVerificationLoginRequest request IAuthenticator <TUser> authenticator Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Implements IEndpointDefinition"
  },
  "api/AuthEndpoints.MinimalApi.UsersEndpointDefinition-2.html": {
    "href": "api/AuthEndpoints.MinimalApi.UsersEndpointDefinition-2.html",
    "title": "Class UsersEndpointDefinition<TKey, TUser> | AuthEndpoints",
    "keywords": "Class UsersEndpointDefinition<TKey, TUser> Inheritance System.Object UsersEndpointDefinition<TKey, TUser> Implements IEndpointDefinition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class UsersEndpointDefinition<TKey, TUser> : IEndpointDefinition where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source Delete(HttpContext, UserManager<TUser>) Use this endpoint to delete authenticated user. Declaration [Authorize(AuthenticationSchemes = \"Bearer\")] public virtual async Task<IResult> Delete(HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source EmailVerification(HttpContext, UserManager<TUser>, IOptions<AuthEndpointsOptions>, IEmailFactory, IEmailSender) Use this endpoints to send email verification link via email You should provide site in your frontend application (configured by EmailConfirmationUrl ) which will send POST request to verify email confirmation endpoint. Declaration [Authorize(AuthenticationSchemes = \"Bearer\")] public virtual async Task<IResult> EmailVerification(HttpContext context, UserManager<TUser> userManager, IOptions<AuthEndpointsOptions> opt, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > opt IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source EmailVerificationConfirm(ConfirmEmailRequest, UserManager<TUser>) Use this endpoint to confirm user email. Declaration public virtual async Task<IResult> EmailVerificationConfirm([FromBody] ConfirmEmailRequest request, UserManager<TUser> userManager) Parameters Type Name Description ConfirmEmailRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source GetMe(HttpContext, UserManager<TUser>) Use this endpoint to retrieve the authenticated user Declaration [Authorize(AuthenticationSchemes = \"Bearer\")] public virtual async Task<IResult> GetMe(HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public virtual void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app | Improve this Doc View Source Register(RegisterRequest, UserManager<TUser>, IdentityErrorDescriber) Use this endpoint to register a new user Declaration public virtual async Task<IResult> Register([FromBody] RegisterRequest request, UserManager<TUser> userManager, IdentityErrorDescriber errorDescriber) Parameters Type Name Description RegisterRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.AspNetCore.Identity.IdentityErrorDescriber errorDescriber Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source ResetPassword(ResetPasswordRequest, UserManager<TUser>, IOptions<AuthEndpointsOptions>, IEmailFactory, IEmailSender) Use this endpoint to send email to user with password reset link. You should provide site in your frontend application (configured by PasswordResetUrl ) which will send POST request to reset password confirmation endpoint. Declaration public virtual async Task<IResult> ResetPassword([FromBody] ResetPasswordRequest request, UserManager<TUser> userManager, IOptions<AuthEndpointsOptions> opt, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description ResetPasswordRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > opt IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source ResetPasswordConfirm(ResetPasswordConfirmRequest, UserManager<TUser>) Use this endpoint to finish reset password process. Declaration public virtual async Task<IResult> ResetPasswordConfirm([FromBody] ResetPasswordConfirmRequest request, UserManager<TUser> userManager) Parameters Type Name Description ResetPasswordConfirmRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source SetPassword(SetPasswordRequest, HttpContext, UserManager<TUser>) Use this endpoint to change user password Declaration [Authorize(AuthenticationSchemes = \"Bearer\")] public virtual async Task<IResult> SetPassword([FromBody] SetPasswordRequest request, HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description SetPasswordRequest request Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source SetUsername(SetUsernameRequest, HttpContext, UserManager<TUser>) Use this endpoint to change user's username Declaration [Authorize(AuthenticationSchemes = \"Bearer\")] public virtual async Task<IResult> SetUsername([FromBody] SetUsernameRequest request, HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description SetUsernameRequest request Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Implements IEndpointDefinition"
  },
  "api/AuthEndpoints.MinimalApi.ValidationResult.html": {
    "href": "api/AuthEndpoints.MinimalApi.ValidationResult.html",
    "title": "Class ValidationResult | AuthEndpoints",
    "keywords": "Class ValidationResult Inheritance System.Object ValidationResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class ValidationResult Properties | Improve this Doc View Source Errors Declaration public IList<string> Errors { get; set; } Property Value Type Description IList < System.String > | Improve this Doc View Source IsValid Declaration public bool IsValid { get; set; } Property Value Type Description System.Boolean"
  },
  "api/AuthEndpoints.SimpleJwt.Contracts.AuthenticatedUserResponse.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Contracts.AuthenticatedUserResponse.html",
    "title": "Class AuthenticatedUserResponse | AuthEndpoints",
    "keywords": "Class AuthenticatedUserResponse the dto used to send an authenticated user response containing access Token and refresh Token Inheritance System.Object AuthenticatedUserResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Contracts Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class AuthenticatedUserResponse Properties | Improve this Doc View Source AccessToken Declaration public string AccessToken { get; set; } Property Value Type Description System.String | Improve this Doc View Source RefreshToken Declaration public string RefreshToken { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.SimpleJwt.Contracts.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Contracts.html",
    "title": "Namespace AuthEndpoints.SimpleJwt.Contracts | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.SimpleJwt.Contracts Classes AuthenticatedUserResponse the dto used to send an authenticated user response containing access Token and refresh Token"
  },
  "api/AuthEndpoints.SimpleJwt.Core.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.html",
    "title": "Namespace AuthEndpoints.SimpleJwt.Core | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.SimpleJwt.Core Classes JwtSigningOptions Signing options for Jwt OptionsConfigurator A class for configuring SimpleJwtOptions OptionsValidator RefreshTokenNotFoundException RefreshTokenRepository<TContext> SimpleJwtBuilder Helper functions for configuring SimpleJwt services. SimpleJwtOptions Interfaces IRefreshTokenRepository Implements IRefreshTokenRepository to define your Refresh token repository"
  },
  "api/AuthEndpoints.SimpleJwt.Core.IRefreshTokenRepository.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.IRefreshTokenRepository.html",
    "title": "Interface IRefreshTokenRepository | AuthEndpoints",
    "keywords": "Interface IRefreshTokenRepository Implements IRefreshTokenRepository to define your Refresh token repository Namespace : AuthEndpoints.SimpleJwt.Core Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public interface IRefreshTokenRepository Methods | Improve this Doc View Source AddAsync(RefreshToken) Declaration Task AddAsync(RefreshToken refreshToken) Parameters Type Name Description RefreshToken refreshToken Returns Type Description Task | Improve this Doc View Source GetByIdAsync(Int32) Declaration Task<RefreshToken> GetByIdAsync(int id) Parameters Type Name Description System.Int32 id Returns Type Description Task < RefreshToken > | Improve this Doc View Source GetByTokenAsync(String) Declaration Task<RefreshToken> GetByTokenAsync(string token) Parameters Type Name Description System.String token Returns Type Description Task < RefreshToken > | Improve this Doc View Source SaveChangesAsync() Declaration Task<int> SaveChangesAsync() Returns Type Description Task < System.Int32 >"
  },
  "api/AuthEndpoints.SimpleJwt.Core.JwtSigningOptions.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.JwtSigningOptions.html",
    "title": "Class JwtSigningOptions | AuthEndpoints",
    "keywords": "Class JwtSigningOptions Signing options for Jwt Inheritance System.Object JwtSigningOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class JwtSigningOptions Properties | Improve this Doc View Source Algorithm To use symmetric HMAC signing and verification, the following algorithms may be used: 'HS256', 'HS384', 'HS512'. When an HMAC algorithm is chosen, the SigningKey setting will be used as both the signing key and the verifying key. To use asymmetric RSA signing and verification, the following algorithms may be used: 'RS256', 'RS384', 'RS512'. When an RSA algorithm is chosen, the SigningKey setting must be set to an RsaSecurityKey that contains an RSA private key. Likewise, the TokenValidationParammeters setting must be set to an RsaSecurityKey that contains an RSA public key. Declaration public string Algorithm { get; set; } Property Value Type Description System.String | Improve this Doc View Source ExpirationMinutes Declaration public int ExpirationMinutes { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SigningKey The signing key that is used to sign the content of generated tokens. Declaration public SecurityKey SigningKey { get; set; } Property Value Type Description Microsoft.IdentityModel.Tokens.SecurityKey"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Models.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Models.html",
    "title": "Namespace AuthEndpoints.SimpleJwt.Core.Models | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.SimpleJwt.Core.Models Classes RefreshToken Refresh token model"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Models.RefreshToken.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Models.RefreshToken.html",
    "title": "Class RefreshToken | AuthEndpoints",
    "keywords": "Class RefreshToken Refresh token model Inheritance System.Object RefreshToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core.Models Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class RefreshToken Properties | Improve this Doc View Source Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.SimpleJwt.Core.OptionsConfigurator.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.OptionsConfigurator.html",
    "title": "Class OptionsConfigurator | AuthEndpoints",
    "keywords": "Class OptionsConfigurator A class for configuring SimpleJwtOptions Inheritance System.Object OptionsConfigurator Implements Microsoft.Extensions.Options.IPostConfigureOptions < SimpleJwtOptions > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class OptionsConfigurator : IPostConfigureOptions<SimpleJwtOptions> Methods | Improve this Doc View Source PostConfigure(String, SimpleJwtOptions) Declaration public void PostConfigure(string name, SimpleJwtOptions options) Parameters Type Name Description System.String name SimpleJwtOptions options Implements Microsoft.Extensions.Options.IPostConfigureOptions<TOptions>"
  },
  "api/AuthEndpoints.SimpleJwt.Core.OptionsValidator.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.OptionsValidator.html",
    "title": "Class OptionsValidator | AuthEndpoints",
    "keywords": "Class OptionsValidator Inheritance System.Object OptionsValidator Implements Microsoft.Extensions.Options.IValidateOptions < SimpleJwtOptions > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class OptionsValidator : IValidateOptions<SimpleJwtOptions> Constructors | Improve this Doc View Source OptionsValidator(ILogger<OptionsValidator>) Declaration public OptionsValidator(ILogger<OptionsValidator> logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger < OptionsValidator > logger Methods | Improve this Doc View Source Validate(String, SimpleJwtOptions) Declaration public ValidateOptionsResult Validate(string name, SimpleJwtOptions options) Parameters Type Name Description System.String name SimpleJwtOptions options Returns Type Description Microsoft.Extensions.Options.ValidateOptionsResult Implements Microsoft.Extensions.Options.IValidateOptions<TOptions>"
  },
  "api/AuthEndpoints.SimpleJwt.Core.RefreshTokenNotFoundException.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.RefreshTokenNotFoundException.html",
    "title": "Class RefreshTokenNotFoundException | AuthEndpoints",
    "keywords": "Class RefreshTokenNotFoundException Inheritance System.Object RefreshTokenNotFoundException Namespace : AuthEndpoints.SimpleJwt.Core Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class RefreshTokenNotFoundException : Exception Constructors | Improve this Doc View Source RefreshTokenNotFoundException() Declaration public RefreshTokenNotFoundException() | Improve this Doc View Source RefreshTokenNotFoundException(String) Declaration public RefreshTokenNotFoundException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source RefreshTokenNotFoundException(String, Exception) Declaration public RefreshTokenNotFoundException(string message, Exception inner) Parameters Type Name Description System.String message Exception inner"
  },
  "api/AuthEndpoints.SimpleJwt.Core.RefreshTokenRepository-1.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.RefreshTokenRepository-1.html",
    "title": "Class RefreshTokenRepository<TContext> | AuthEndpoints",
    "keywords": "Class RefreshTokenRepository<TContext> Inheritance System.Object RefreshTokenRepository<TContext> Implements IRefreshTokenRepository Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class RefreshTokenRepository<TContext> : IRefreshTokenRepository where TContext : DbContext Type Parameters Name Description TContext Constructors | Improve this Doc View Source RefreshTokenRepository(TContext) Declaration public RefreshTokenRepository(TContext context) Parameters Type Name Description TContext context Methods | Improve this Doc View Source AddAsync(RefreshToken) Declaration public async Task AddAsync(RefreshToken refreshToken) Parameters Type Name Description RefreshToken refreshToken Returns Type Description Task | Improve this Doc View Source GetByIdAsync(Int32) Declaration public async Task<RefreshToken> GetByIdAsync(int id) Parameters Type Name Description System.Int32 id Returns Type Description Task < RefreshToken > | Improve this Doc View Source GetByTokenAsync(String) Declaration public async Task<RefreshToken> GetByTokenAsync(string token) Parameters Type Name Description System.String token Returns Type Description Task < RefreshToken > | Improve this Doc View Source SaveChangesAsync() Declaration public async Task<int> SaveChangesAsync() Returns Type Description Task < System.Int32 > Implements IRefreshTokenRepository"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.AccessTokenGenerator.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.AccessTokenGenerator.html",
    "title": "Class AccessTokenGenerator | AuthEndpoints",
    "keywords": "Class AccessTokenGenerator Inheritance System.Object AccessTokenGenerator Implements IAccessTokenGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class AccessTokenGenerator : IAccessTokenGenerator Constructors | Improve this Doc View Source AccessTokenGenerator(JwtSecurityTokenHandler, IOptions<SimpleJwtOptions>, IClaimsProvider) Declaration public AccessTokenGenerator(JwtSecurityTokenHandler tokenHandler, IOptions<SimpleJwtOptions> options, IClaimsProvider claimsProvider) Parameters Type Name Description System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler tokenHandler Microsoft.Extensions.Options.IOptions < SimpleJwtOptions > options IClaimsProvider claimsProvider Methods | Improve this Doc View Source GenerateAccessToken(ClaimsPrincipal) Declaration public string GenerateAccessToken(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description System.String Implements IAccessTokenGenerator"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.DefaultClaimsProvider.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.DefaultClaimsProvider.html",
    "title": "Class DefaultClaimsProvider | AuthEndpoints",
    "keywords": "Class DefaultClaimsProvider Use DefaultClaimsProvider to get access token claims and refresh token claims Inheritance System.Object DefaultClaimsProvider Implements IClaimsProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class DefaultClaimsProvider : IClaimsProvider Methods | Improve this Doc View Source ProvideAccessClaims(ClaimsPrincipal) Provide claims for access token Declaration public virtual IEnumerable<Claim> ProvideAccessClaims(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description IEnumerable < System.Security.Claims.Claim > | Improve this Doc View Source ProvideRefreshClaims(ClaimsPrincipal) Provide claims for refresh token Declaration public virtual IEnumerable<Claim> ProvideRefreshClaims(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description IEnumerable < System.Security.Claims.Claim > Implements IClaimsProvider"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.html",
    "title": "Namespace AuthEndpoints.SimpleJwt.Core.Services | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.SimpleJwt.Core.Services Classes AccessTokenGenerator DefaultClaimsProvider Use DefaultClaimsProvider to get access token claims and refresh token claims RefreshTokenGenerator RefreshTokenValidator Use this class to validate refresh tokens TokenGeneratorService Interfaces IAccessTokenGenerator IClaimsProvider Implements IClaimsProvider to define your claims provider IRefreshTokenGenerator IRefreshTokenValidator ITokenGeneratorService"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.IAccessTokenGenerator.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.IAccessTokenGenerator.html",
    "title": "Interface IAccessTokenGenerator | AuthEndpoints",
    "keywords": "Interface IAccessTokenGenerator Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public interface IAccessTokenGenerator Methods | Improve this Doc View Source GenerateAccessToken(ClaimsPrincipal) Declaration string GenerateAccessToken(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description System.String"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.IClaimsProvider.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.IClaimsProvider.html",
    "title": "Interface IClaimsProvider | AuthEndpoints",
    "keywords": "Interface IClaimsProvider Implements IClaimsProvider to define your claims provider Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public interface IClaimsProvider Methods | Improve this Doc View Source ProvideAccessClaims(ClaimsPrincipal) Use this method to get a list of claims for the given user Declaration IEnumerable<Claim> ProvideAccessClaims(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description IEnumerable < System.Security.Claims.Claim > | Improve this Doc View Source ProvideRefreshClaims(ClaimsPrincipal) Use this method to get a list of claims for the given user Declaration IEnumerable<Claim> ProvideRefreshClaims(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description IEnumerable < System.Security.Claims.Claim >"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.IRefreshTokenGenerator.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.IRefreshTokenGenerator.html",
    "title": "Interface IRefreshTokenGenerator | AuthEndpoints",
    "keywords": "Interface IRefreshTokenGenerator Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public interface IRefreshTokenGenerator Methods | Improve this Doc View Source GenerateRefreshToken(ClaimsPrincipal) Declaration string GenerateRefreshToken(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description System.String"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.IRefreshTokenValidator.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.IRefreshTokenValidator.html",
    "title": "Interface IRefreshTokenValidator | AuthEndpoints",
    "keywords": "Interface IRefreshTokenValidator Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public interface IRefreshTokenValidator Methods | Improve this Doc View Source ValidateRefreshTokenAsync(String) Declaration Task<TokenValidationResult> ValidateRefreshTokenAsync(string token) Parameters Type Name Description System.String token Returns Type Description Task < Microsoft.IdentityModel.Tokens.TokenValidationResult >"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.ITokenGeneratorService.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.ITokenGeneratorService.html",
    "title": "Interface ITokenGeneratorService | AuthEndpoints",
    "keywords": "Interface ITokenGeneratorService Inherited Members IAccessTokenGenerator.GenerateAccessToken(ClaimsPrincipal) IRefreshTokenGenerator.GenerateRefreshToken(ClaimsPrincipal) Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public interface ITokenGeneratorService : IAccessTokenGenerator, IRefreshTokenGenerator"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.RefreshTokenGenerator.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.RefreshTokenGenerator.html",
    "title": "Class RefreshTokenGenerator | AuthEndpoints",
    "keywords": "Class RefreshTokenGenerator Inheritance System.Object RefreshTokenGenerator Implements IRefreshTokenGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class RefreshTokenGenerator : IRefreshTokenGenerator Constructors | Improve this Doc View Source RefreshTokenGenerator(JwtSecurityTokenHandler, IOptions<SimpleJwtOptions>, IClaimsProvider) Declaration public RefreshTokenGenerator(JwtSecurityTokenHandler tokenHandler, IOptions<SimpleJwtOptions> options, IClaimsProvider claimsProvider) Parameters Type Name Description System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler tokenHandler Microsoft.Extensions.Options.IOptions < SimpleJwtOptions > options IClaimsProvider claimsProvider Methods | Improve this Doc View Source GenerateRefreshToken(ClaimsPrincipal) Declaration public string GenerateRefreshToken(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description System.String Implements IRefreshTokenGenerator"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.RefreshTokenValidator.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.RefreshTokenValidator.html",
    "title": "Class RefreshTokenValidator | AuthEndpoints",
    "keywords": "Class RefreshTokenValidator Use this class to validate refresh tokens Inheritance System.Object RefreshTokenValidator Implements IRefreshTokenValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class RefreshTokenValidator : IRefreshTokenValidator Constructors | Improve this Doc View Source RefreshTokenValidator(JwtSecurityTokenHandler, IOptions<SimpleJwtOptions>, IRefreshTokenRepository) Declaration public RefreshTokenValidator(JwtSecurityTokenHandler tokenHandler, IOptions<SimpleJwtOptions> options, IRefreshTokenRepository repository) Parameters Type Name Description System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler tokenHandler Microsoft.Extensions.Options.IOptions < SimpleJwtOptions > options IRefreshTokenRepository repository Methods | Improve this Doc View Source ValidateRefreshTokenAsync(String) Validate a refresh token Declaration public async Task<TokenValidationResult> ValidateRefreshTokenAsync(string token) Parameters Type Name Description System.String token Returns Type Description Task < Microsoft.IdentityModel.Tokens.TokenValidationResult > Implements IRefreshTokenValidator"
  },
  "api/AuthEndpoints.SimpleJwt.Core.Services.TokenGeneratorService.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.Services.TokenGeneratorService.html",
    "title": "Class TokenGeneratorService | AuthEndpoints",
    "keywords": "Class TokenGeneratorService Inheritance System.Object TokenGeneratorService Implements ITokenGeneratorService IAccessTokenGenerator IRefreshTokenGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core.Services Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class TokenGeneratorService : ITokenGeneratorService, IAccessTokenGenerator, IRefreshTokenGenerator Constructors | Improve this Doc View Source TokenGeneratorService(IAccessTokenGenerator, IRefreshTokenGenerator) Declaration public TokenGeneratorService(IAccessTokenGenerator accessTokenGenerator, IRefreshTokenGenerator refreshTokenGenerator) Parameters Type Name Description IAccessTokenGenerator accessTokenGenerator IRefreshTokenGenerator refreshTokenGenerator Fields | Improve this Doc View Source _accessTokenGenerator Declaration protected readonly IAccessTokenGenerator _accessTokenGenerator Field Value Type Description IAccessTokenGenerator | Improve this Doc View Source _refreshTokenGenerator Declaration protected readonly IRefreshTokenGenerator _refreshTokenGenerator Field Value Type Description IRefreshTokenGenerator Methods | Improve this Doc View Source GenerateAccessToken(ClaimsPrincipal) Declaration public string GenerateAccessToken(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description System.String | Improve this Doc View Source GenerateRefreshToken(ClaimsPrincipal) Declaration public string GenerateRefreshToken(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description System.String Implements ITokenGeneratorService IAccessTokenGenerator IRefreshTokenGenerator"
  },
  "api/AuthEndpoints.SimpleJwt.Core.SimpleJwtBuilder.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.SimpleJwtBuilder.html",
    "title": "Class SimpleJwtBuilder | AuthEndpoints",
    "keywords": "Class SimpleJwtBuilder Helper functions for configuring SimpleJwt services. Inheritance System.Object SimpleJwtBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class SimpleJwtBuilder Constructors | Improve this Doc View Source SimpleJwtBuilder(Type, Type, IServiceCollection, SimpleJwtOptions) Creates a new instance of SimpleJwtBuilder . Declaration public SimpleJwtBuilder(Type userKeyType, Type userType, IServiceCollection services, SimpleJwtOptions options) Parameters Type Name Description Type userKeyType Type userType The type to use for the users. Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to attach to. SimpleJwtOptions options Properties | Improve this Doc View Source Options Gets the SimpleJwtOptions Declaration public SimpleJwtOptions Options { get; } Property Value Type Description SimpleJwtOptions Gets the SimpleJwtOptions | Improve this Doc View Source Services Gets the Microsoft.Extensions.DependencyInjection.IServiceCollection services are attached to. Declaration public IServiceCollection Services { get; } Property Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The Microsoft.Extensions.DependencyInjection.IServiceCollection services are attached to. | Improve this Doc View Source UserKeyType Gets the type used for user id. Declaration public Type UserKeyType { get; } Property Value Type Description Type The type used for user id. | Improve this Doc View Source UserType Gets the type used for users. Declaration public Type UserType { get; } Property Value Type Description Type The type used for users. Methods | Improve this Doc View Source AddAccessTokenGenerator<TGenerator>() Adds an IAccessTokenGenerator . Declaration public virtual SimpleJwtBuilder AddAccessTokenGenerator<TGenerator>() where TGenerator : class Returns Type Description SimpleJwtBuilder The current SimpleJwtBuilder instance. Type Parameters Name Description TGenerator The type of the access token generator. | Improve this Doc View Source AddClaimsProvider<TProvider>() Adds an IClaimsProvider . Declaration public virtual SimpleJwtBuilder AddClaimsProvider<TProvider>() where TProvider : class Returns Type Description SimpleJwtBuilder The current SimpleJwtBuilder instance. Type Parameters Name Description TProvider The type of the claims provider. | Improve this Doc View Source AddErrorDescriber<TDescriber>() Adds an Microsoft.AspNetCore.Identity.IdentityErrorDescriber . Declaration public virtual SimpleJwtBuilder AddErrorDescriber<TDescriber>() where TDescriber : IdentityErrorDescriber Returns Type Description SimpleJwtBuilder The current SimpleJwtBuilder instance. Type Parameters Name Description TDescriber The type of the error describer. | Improve this Doc View Source AddRefreshTokenGenerator<TGenerator>() Adds an IAccessTokenGenerator . Declaration public virtual SimpleJwtBuilder AddRefreshTokenGenerator<TGenerator>() where TGenerator : class Returns Type Description SimpleJwtBuilder The current SimpleJwtBuilder instance. Type Parameters Name Description TGenerator The type of the access token generator. | Improve this Doc View Source AddRefreshTokenStore<TContext>() Declaration public virtual SimpleJwtBuilder AddRefreshTokenStore<TContext>() where TContext : DbContext Returns Type Description SimpleJwtBuilder Type Parameters Name Description TContext | Improve this Doc View Source AddScoped(Type, Type) Declaration protected SimpleJwtBuilder AddScoped(Type serviceType, Type concreteType) Parameters Type Name Description Type serviceType Type concreteType Returns Type Description SimpleJwtBuilder"
  },
  "api/AuthEndpoints.SimpleJwt.Core.SimpleJwtOptions.html": {
    "href": "api/AuthEndpoints.SimpleJwt.Core.SimpleJwtOptions.html",
    "title": "Class SimpleJwtOptions | AuthEndpoints",
    "keywords": "Class SimpleJwtOptions Inheritance System.Object SimpleJwtOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt.Core Assembly : AuthEndpoints.SimpleJwt.Core.dll Syntax public class SimpleJwtOptions Fields | Improve this Doc View Source Key Declaration public const string Key = \"SimpleJwtOptions\" Field Value Type Description System.String Properties | Improve this Doc View Source AccessSigningOptions Signing options used for signing access jwts Declaration public JwtSigningOptions AccessSigningOptions { get; set; } Property Value Type Description JwtSigningOptions | Improve this Doc View Source AccessValidationParameters Validation parameters used for verifying access jwts Declaration public TokenValidationParameters AccessValidationParameters { get; set; } Property Value Type Description Microsoft.IdentityModel.Tokens.TokenValidationParameters | Improve this Doc View Source Audience Declaration public string Audience { get; set; } Property Value Type Description System.String | Improve this Doc View Source CookieOptions Declaration public CookieOptions CookieOptions { get; set; } Property Value Type Description Microsoft.AspNetCore.Http.CookieOptions | Improve this Doc View Source Issuer Declaration public string Issuer { get; set; } Property Value Type Description System.String | Improve this Doc View Source RefreshSigningOptions Signing options used for signing refresh jwts Declaration public JwtSigningOptions RefreshSigningOptions { get; set; } Property Value Type Description JwtSigningOptions | Improve this Doc View Source RefreshValidationParameters Validation parameters used for verifying refresh jwts Declaration public TokenValidationParameters RefreshValidationParameters { get; set; } Property Value Type Description Microsoft.IdentityModel.Tokens.TokenValidationParameters | Improve this Doc View Source UseCookie Declaration public bool UseCookie { get; set; } Property Value Type Description System.Boolean"
  },
  "api/AuthEndpoints.SimpleJwt.html": {
    "href": "api/AuthEndpoints.SimpleJwt.html",
    "title": "Namespace AuthEndpoints.SimpleJwt | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.SimpleJwt Classes JwtCookieEndpointDefinitions<TKey, TUser> JwtEndpointDefinition<TKey, TUser> Minimal Api definitions for JWT endpoints. JwtHttpOnlyCookieLoginService JwtLoginService Use this class to log a user in. ServiceCollectionExtensions"
  },
  "api/AuthEndpoints.SimpleJwt.JwtCookieEndpointDefinitions-2.html": {
    "href": "api/AuthEndpoints.SimpleJwt.JwtCookieEndpointDefinitions-2.html",
    "title": "Class JwtCookieEndpointDefinitions<TKey, TUser> | AuthEndpoints",
    "keywords": "Class JwtCookieEndpointDefinitions<TKey, TUser> Inheritance System.Object JwtCookieEndpointDefinitions<TKey, TUser> Implements IEndpointDefinition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt Assembly : AuthEndpoints.SimpleJwt.dll Syntax public class JwtCookieEndpointDefinitions<TKey, TUser> : IEndpointDefinition where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source Create(LoginRequest, IAuthenticator<TUser>, JwtHttpOnlyCookieLoginService, UserManager<TUser>, IUserClaimsPrincipalFactory<TUser>) Use this endpoint to login. Declaration public virtual async Task<IResult> Create([FromBody] LoginRequest request, IAuthenticator<TUser> authenticator, JwtHttpOnlyCookieLoginService jwtLoginService, UserManager<TUser> userManager, IUserClaimsPrincipalFactory<TUser> claimsFactory) Parameters Type Name Description LoginRequest request IAuthenticator <TUser> authenticator JwtHttpOnlyCookieLoginService jwtLoginService Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory <TUser> claimsFactory Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Remarks Use this endpoint to obtain jwt | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public virtual void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app | Improve this Doc View Source Refresh(HttpContext, IUserClaimsPrincipalFactory<TUser>, IRefreshTokenValidator, UserManager<TUser>, IAccessTokenGenerator, IOptions<SimpleJwtOptions>) Use this endpoint to refresh jwt Declaration public virtual async Task<IResult> Refresh(HttpContext context, IUserClaimsPrincipalFactory<TUser> claimsFactory, IRefreshTokenValidator tokenValidator, UserManager<TUser> userManager, IAccessTokenGenerator tokenGenerator, IOptions<SimpleJwtOptions> options) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory <TUser> claimsFactory IRefreshTokenValidator tokenValidator Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IAccessTokenGenerator tokenGenerator Microsoft.Extensions.Options.IOptions < SimpleJwtOptions > options Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source Verify() Declaration [Authorize(AuthenticationSchemes = \"jwt\")] public virtual Task<IResult> Verify() Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Implements IEndpointDefinition"
  },
  "api/AuthEndpoints.SimpleJwt.JwtEndpointDefinition-2.html": {
    "href": "api/AuthEndpoints.SimpleJwt.JwtEndpointDefinition-2.html",
    "title": "Class JwtEndpointDefinition<TKey, TUser> | AuthEndpoints",
    "keywords": "Class JwtEndpointDefinition<TKey, TUser> Minimal Api definitions for JWT endpoints. Inheritance System.Object JwtEndpointDefinition<TKey, TUser> Implements IEndpointDefinition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt Assembly : AuthEndpoints.SimpleJwt.dll Syntax public class JwtEndpointDefinition<TKey, TUser> : IEndpointDefinition where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source Create(LoginRequest, IAuthenticator<TUser>, JwtLoginService, UserManager<TUser>, IUserClaimsPrincipalFactory<TUser>) Use this endpoint to obtain jwt Declaration public virtual async Task<IResult> Create([FromBody] LoginRequest request, IAuthenticator<TUser> authenticator, JwtLoginService jwtLoginService, UserManager<TUser> userManager, IUserClaimsPrincipalFactory<TUser> claimsFactory) Parameters Type Name Description LoginRequest request IAuthenticator <TUser> authenticator JwtLoginService jwtLoginService Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory <TUser> claimsFactory Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Remarks Use this endpoint to obtain jwt | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public virtual void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app | Improve this Doc View Source Refresh(RefreshRequest, HttpContext, IRefreshTokenValidator, UserManager<TUser>, IAccessTokenGenerator, IUserClaimsPrincipalFactory<TUser>) Use this endpoint to refresh jwt Declaration public virtual async Task<IResult> Refresh([FromBody] RefreshRequest request, HttpContext context, IRefreshTokenValidator tokenValidator, UserManager<TUser> userManager, IAccessTokenGenerator tokenGenerator, IUserClaimsPrincipalFactory<TUser> claimsFactory) Parameters Type Name Description RefreshRequest request Microsoft.AspNetCore.Http.HttpContext context IRefreshTokenValidator tokenValidator Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IAccessTokenGenerator tokenGenerator Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory <TUser> claimsFactory Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source Verify() Use this endpoint to verify access jwt Declaration [Authorize(AuthenticationSchemes = \"jwt\")] public virtual Task<IResult> Verify() Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Implements IEndpointDefinition"
  },
  "api/AuthEndpoints.SimpleJwt.JwtHttpOnlyCookieLoginService.html": {
    "href": "api/AuthEndpoints.SimpleJwt.JwtHttpOnlyCookieLoginService.html",
    "title": "Class JwtHttpOnlyCookieLoginService | AuthEndpoints",
    "keywords": "Class JwtHttpOnlyCookieLoginService Inheritance System.Object JwtHttpOnlyCookieLoginService Implements ILoginService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt Assembly : AuthEndpoints.SimpleJwt.dll Syntax public class JwtHttpOnlyCookieLoginService : ILoginService Constructors | Improve this Doc View Source JwtHttpOnlyCookieLoginService(ITokenGeneratorService, IRefreshTokenRepository, IOptions<SimpleJwtOptions>, IHttpContextAccessor) Declaration public JwtHttpOnlyCookieLoginService(ITokenGeneratorService tokenGenerator, IRefreshTokenRepository refreshTokenRepository, IOptions<SimpleJwtOptions> options, IHttpContextAccessor httpContextAccessor) Parameters Type Name Description ITokenGeneratorService tokenGenerator IRefreshTokenRepository refreshTokenRepository Microsoft.Extensions.Options.IOptions < SimpleJwtOptions > options Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor Methods | Improve this Doc View Source LoginAsync(ClaimsPrincipal) Use this method to get an access Token and a refresh Token for the given TUser Declaration public async Task<object> LoginAsync(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description Task < System.Object > An instance of AuthenticatedUserResponse , containing an access Token and a refresh Token Implements ILoginService"
  },
  "api/AuthEndpoints.SimpleJwt.JwtLoginService.html": {
    "href": "api/AuthEndpoints.SimpleJwt.JwtLoginService.html",
    "title": "Class JwtLoginService | AuthEndpoints",
    "keywords": "Class JwtLoginService Use this class to log a user in. Inheritance System.Object JwtLoginService Implements ILoginService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt Assembly : AuthEndpoints.SimpleJwt.dll Syntax public class JwtLoginService : ILoginService Constructors | Improve this Doc View Source JwtLoginService(ITokenGeneratorService, IRefreshTokenRepository) Declaration public JwtLoginService(ITokenGeneratorService tokenGenerator, IRefreshTokenRepository refreshTokenRepository) Parameters Type Name Description ITokenGeneratorService tokenGenerator IRefreshTokenRepository refreshTokenRepository Methods | Improve this Doc View Source LoginAsync(ClaimsPrincipal) Use this method to get an access Token and a refresh Token for the given TUser Declaration public async Task<object> LoginAsync(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description Task < System.Object > An instance of AuthenticatedUserResponse , containing an access Token and a refresh Token Implements ILoginService"
  },
  "api/AuthEndpoints.SimpleJwt.ServiceCollectionExtensions.html": {
    "href": "api/AuthEndpoints.SimpleJwt.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | AuthEndpoints",
    "keywords": "Class ServiceCollectionExtensions Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.SimpleJwt Assembly : AuthEndpoints.SimpleJwt.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddJwtCookieEndpoints<TUser, TContext>(IServiceCollection) Adds the SimpleJwt default system Declaration public static SimpleJwtBuilder AddJwtCookieEndpoints<TUser, TContext>(this IServiceCollection services) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description SimpleJwtBuilder An SimpleJwtBuilder for creating and configuring the SimpleJwt system. Type Parameters Name Description TUser TContext | Improve this Doc View Source AddJwtCookieEndpoints<TUser, TContext>(IServiceCollection, Action<SimpleJwtOptions>) Adds and configures Jwt in HttpOnly Cookie system. Declaration public static SimpleJwtBuilder AddJwtCookieEndpoints<TUser, TContext>(this IServiceCollection services, Action<SimpleJwtOptions> setup) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The services available in the application. Action < SimpleJwtOptions > setup An action to configure the SimpleJwtOptions . Returns Type Description SimpleJwtBuilder An SimpleJwtBuilder for creating and configuring the SimpleJwt system. Type Parameters Name Description TUser The type representing a User in the system. TContext | Improve this Doc View Source AddSimpleJwtCore<TUser, TContext>(IServiceCollection, SimpleJwtOptions) Declaration public static SimpleJwtBuilder AddSimpleJwtCore<TUser, TContext>(this IServiceCollection services, SimpleJwtOptions options) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services SimpleJwtOptions options Returns Type Description SimpleJwtBuilder Type Parameters Name Description TUser TContext | Improve this Doc View Source AddSimpleJwtEndpoints<TUser, TContext>(IServiceCollection) Adds the SimpleJwt default system Declaration public static SimpleJwtBuilder AddSimpleJwtEndpoints<TUser, TContext>(this IServiceCollection services) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description SimpleJwtBuilder An SimpleJwtBuilder for creating and configuring the SimpleJwt system. Type Parameters Name Description TUser TContext | Improve this Doc View Source AddSimpleJwtEndpoints<TUser, TContext>(IServiceCollection, Action<SimpleJwtOptions>) Adds and configures the Simple Jwt core system. Declaration public static SimpleJwtBuilder AddSimpleJwtEndpoints<TUser, TContext>(this IServiceCollection services, Action<SimpleJwtOptions> setup) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The services available in the application. Action < SimpleJwtOptions > setup An action to configure the SimpleJwtOptions . Returns Type Description SimpleJwtBuilder An SimpleJwtBuilder for creating and configuring the SimpleJwt system. Type Parameters Name Description TUser The type representing a User in the system. TContext"
  },
  "api/AuthEndpoints.TokenAuth.AuthenticationBuilderExtensions.html": {
    "href": "api/AuthEndpoints.TokenAuth.AuthenticationBuilderExtensions.html",
    "title": "Class AuthenticationBuilderExtensions | AuthEndpoints",
    "keywords": "Class AuthenticationBuilderExtensions Inheritance System.Object AuthenticationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth Assembly : AuthEndpoints.TokenAuth.dll Syntax public static class AuthenticationBuilderExtensions Methods | Improve this Doc View Source AddTokenBearer(AuthenticationBuilder, Type, Type) Declaration public static AuthenticationBuilder AddTokenBearer(this AuthenticationBuilder builder, Type userType, Type contextType) Parameters Type Name Description Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder Type userType Type contextType Returns Type Description Microsoft.AspNetCore.Authentication.AuthenticationBuilder | Improve this Doc View Source AddTokenBearer(AuthenticationBuilder, Type, Type, Type) Declaration public static AuthenticationBuilder AddTokenBearer(this AuthenticationBuilder builder, Type keyType, Type userType, Type contextType) Parameters Type Name Description Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder Type keyType Type userType Type contextType Returns Type Description Microsoft.AspNetCore.Authentication.AuthenticationBuilder | Improve this Doc View Source AddTokenBearer<TUser, TContext>(AuthenticationBuilder) Declaration public static AuthenticationBuilder AddTokenBearer<TUser, TContext>(this AuthenticationBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder Returns Type Description Microsoft.AspNetCore.Authentication.AuthenticationBuilder Type Parameters Name Description TUser TContext | Improve this Doc View Source AddTokenBearer<Tkey, TUser, TContext>(AuthenticationBuilder) Declaration public static AuthenticationBuilder AddTokenBearer<Tkey, TUser, TContext>(this AuthenticationBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder Returns Type Description Microsoft.AspNetCore.Authentication.AuthenticationBuilder Type Parameters Name Description Tkey TUser TContext"
  },
  "api/AuthEndpoints.TokenAuth.Core.AuthTokenGenerator.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.AuthTokenGenerator.html",
    "title": "Class AuthTokenGenerator | AuthEndpoints",
    "keywords": "Class AuthTokenGenerator Use this class to create an authtoken Inheritance System.Object AuthTokenGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public class AuthTokenGenerator Methods | Improve this Doc View Source GenerateToken() Securely generate a 40characters random string Declaration public Task<string> GenerateToken() Returns Type Description Task < System.String > a securely generated random string"
  },
  "api/AuthEndpoints.TokenAuth.Core.AuthTokenValidator-3.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.AuthTokenValidator-3.html",
    "title": "Class AuthTokenValidator<TKey, TUser, TContext> | AuthEndpoints",
    "keywords": "Class AuthTokenValidator<TKey, TUser, TContext> Inheritance System.Object AuthTokenValidator<TKey, TUser, TContext> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public class AuthTokenValidator<TKey, TUser, TContext> where TKey : class, IEquatable<TKey> where TUser : IdentityUser<TKey> where TContext : DbContext Type Parameters Name Description TKey TUser TContext Constructors | Improve this Doc View Source AuthTokenValidator(TokenRepository<TKey, TUser, TContext>) Declaration public AuthTokenValidator(TokenRepository<TKey, TUser, TContext> tokenRepository) Parameters Type Name Description TokenRepository <TKey, TUser, TContext> tokenRepository Methods | Improve this Doc View Source ValidateTokenAsync(String) Declaration public Task<Token<TKey, TUser>> ValidateTokenAsync(string token) Parameters Type Name Description System.String token Returns Type Description Task < Token <TKey, TUser>>"
  },
  "api/AuthEndpoints.TokenAuth.Core.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.html",
    "title": "Namespace AuthEndpoints.TokenAuth.Core | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.TokenAuth.Core Classes AuthTokenGenerator Use this class to create an authtoken AuthTokenValidator<TKey, TUser, TContext> Token<TKey, TUser> TokenAuthBuilder TokenAuthResponse the dto used to send an authenticated user response containing bearer token. TokenAuthServiceCollectionExtensions TokenBearerAuthenticationOptions TokenBearerDefaults TokenBearerHandler<TKey, TUser, TContext> TokenRepository<TKey, TUser, TContext>"
  },
  "api/AuthEndpoints.TokenAuth.Core.Token-2.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.Token-2.html",
    "title": "Class Token<TKey, TUser> | AuthEndpoints",
    "keywords": "Class Token<TKey, TUser> Inheritance System.Object Token<TKey, TUser> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public class Token<TKey, TUser> Type Parameters Name Description TKey TUser Properties | Improve this Doc View Source GetUser Declaration public TUser GetUser { get; set; } Property Value Type Description TUser | Improve this Doc View Source GetUserId Declaration public TKey GetUserId { get; set; } Property Value Type Description TKey | Improve this Doc View Source Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Key Declaration public string Key { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.TokenAuth.Core.TokenAuthBuilder.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.TokenAuthBuilder.html",
    "title": "Class TokenAuthBuilder | AuthEndpoints",
    "keywords": "Class TokenAuthBuilder Inheritance System.Object TokenAuthBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public class TokenAuthBuilder Constructors | Improve this Doc View Source TokenAuthBuilder(Type, Type, Type, IServiceCollection) Declaration public TokenAuthBuilder(Type keyType, Type userType, Type contextType, IServiceCollection services) Parameters Type Name Description Type keyType Type userType Type contextType Microsoft.Extensions.DependencyInjection.IServiceCollection services Properties | Improve this Doc View Source ContextType Declaration public Type ContextType { get; set; } Property Value Type Description Type | Improve this Doc View Source KeyType Declaration public Type KeyType { get; set; } Property Value Type Description Type | Improve this Doc View Source Services Declaration public IServiceCollection Services { get; set; } Property Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection | Improve this Doc View Source UserType Declaration public Type UserType { get; set; } Property Value Type Description Type"
  },
  "api/AuthEndpoints.TokenAuth.Core.TokenAuthResponse.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.TokenAuthResponse.html",
    "title": "Class TokenAuthResponse | AuthEndpoints",
    "keywords": "Class TokenAuthResponse the dto used to send an authenticated user response containing bearer token. Inheritance System.Object TokenAuthResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public class TokenAuthResponse Properties | Improve this Doc View Source AuthToken Declaration public string AuthToken { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.TokenAuth.Core.TokenAuthServiceCollectionExtensions.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.TokenAuthServiceCollectionExtensions.html",
    "title": "Class TokenAuthServiceCollectionExtensions | AuthEndpoints",
    "keywords": "Class TokenAuthServiceCollectionExtensions Inheritance System.Object TokenAuthServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public static class TokenAuthServiceCollectionExtensions"
  },
  "api/AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions.html",
    "title": "Class TokenBearerAuthenticationOptions | AuthEndpoints",
    "keywords": "Class TokenBearerAuthenticationOptions Inheritance System.Object Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions TokenBearerAuthenticationOptions Inherited Members Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Validate() Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Validate(System.String) Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ClaimsIssuer Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Events Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.EventsType Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardDefault Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardAuthenticate Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardChallenge Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardForbid Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardSignIn Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardSignOut Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardDefaultSelector System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public class TokenBearerAuthenticationOptions : AuthenticationSchemeOptions"
  },
  "api/AuthEndpoints.TokenAuth.Core.TokenBearerDefaults.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.TokenBearerDefaults.html",
    "title": "Class TokenBearerDefaults | AuthEndpoints",
    "keywords": "Class TokenBearerDefaults Inheritance System.Object TokenBearerDefaults Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public static class TokenBearerDefaults Fields | Improve this Doc View Source AuthenticationScheme Default value for AuthenticationScheme property in the TokenBearerAuthenticationsOptions Declaration public const string AuthenticationScheme = \"Bearer\" Field Value Type Description System.String"
  },
  "api/AuthEndpoints.TokenAuth.Core.TokenBearerHandler-3.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.TokenBearerHandler-3.html",
    "title": "Class TokenBearerHandler<TKey, TUser, TContext> | AuthEndpoints",
    "keywords": "Class TokenBearerHandler<TKey, TUser, TContext> Inheritance System.Object Microsoft.AspNetCore.Authentication.AuthenticationHandler < TokenBearerAuthenticationOptions > TokenBearerHandler<TKey, TUser, TContext> Implements Microsoft.AspNetCore.Authentication.IAuthenticationHandler Inherited Members Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.InitializeAsync(Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Http.HttpContext) Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.InitializeEventsAsync() Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.CreateEventsAsync() Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.InitializeHandlerAsync() Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.BuildRedirectUri(System.String) Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.ResolveTarget(System.String) Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.AuthenticateAsync() Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.HandleAuthenticateOnceAsync() Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.HandleAuthenticateOnceSafeAsync() Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.HandleChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.ChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.ForbidAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.Scheme Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.Options Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.Context Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.Request Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.Response Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.OriginalPath Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.OriginalPathBase Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.Logger Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.UrlEncoder Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.Clock Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.OptionsMonitor Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.Events Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.ClaimsIssuer Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.CurrentUri System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public class TokenBearerHandler<TKey, TUser, TContext> : AuthenticationHandler<TokenBearerAuthenticationOptions>, IAuthenticationHandler where TKey : class, IEquatable<TKey> where TUser : IdentityUser<TKey> where TContext : DbContext Type Parameters Name Description TKey TUser TContext Constructors | Improve this Doc View Source TokenBearerHandler(IOptionsMonitor<TokenBearerAuthenticationOptions>, ILoggerFactory, UrlEncoder, ISystemClock, AuthTokenValidator<TKey, TUser, TContext>) Declaration public TokenBearerHandler(IOptionsMonitor<TokenBearerAuthenticationOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock, AuthTokenValidator<TKey, TUser, TContext> validator) Parameters Type Name Description Microsoft.Extensions.Options.IOptionsMonitor < TokenBearerAuthenticationOptions > options Microsoft.Extensions.Logging.ILoggerFactory logger System.Text.Encodings.Web.UrlEncoder encoder Microsoft.AspNetCore.Authentication.ISystemClock clock AuthTokenValidator <TKey, TUser, TContext> validator Methods | Improve this Doc View Source HandleAuthenticateAsync() Declaration protected override async Task<AuthenticateResult> HandleAuthenticateAsync() Returns Type Description Task < Microsoft.AspNetCore.Authentication.AuthenticateResult > Overrides Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.HandleAuthenticateAsync() | Improve this Doc View Source HandleForbiddenAsync(AuthenticationProperties) Declaration protected override Task HandleForbiddenAsync(AuthenticationProperties properties) Parameters Type Name Description Microsoft.AspNetCore.Authentication.AuthenticationProperties properties Returns Type Description Task Overrides Microsoft.AspNetCore.Authentication.AuthenticationHandler<AuthEndpoints.TokenAuth.Core.TokenBearerAuthenticationOptions>.HandleForbiddenAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Implements Microsoft.AspNetCore.Authentication.IAuthenticationHandler"
  },
  "api/AuthEndpoints.TokenAuth.Core.TokenRepository-3.html": {
    "href": "api/AuthEndpoints.TokenAuth.Core.TokenRepository-3.html",
    "title": "Class TokenRepository<TKey, TUser, TContext> | AuthEndpoints",
    "keywords": "Class TokenRepository<TKey, TUser, TContext> Inheritance System.Object TokenRepository<TKey, TUser, TContext> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth.Core Assembly : AuthEndpoints.TokenAuth.Core.dll Syntax public class TokenRepository<TKey, TUser, TContext> where TKey : class, IEquatable<TKey> where TUser : IdentityUser<TKey> where TContext : DbContext Type Parameters Name Description TKey TUser TContext Constructors | Improve this Doc View Source TokenRepository(TContext, AuthTokenGenerator) Declaration public TokenRepository(TContext context, AuthTokenGenerator tokenGenerator) Parameters Type Name Description TContext context AuthTokenGenerator tokenGenerator Methods | Improve this Doc View Source CreateAsync(TKey, String) Declaration public async Task<Token<TKey, TUser>> CreateAsync(TKey userId, string key) Parameters Type Name Description TKey userId System.String key Returns Type Description Task < Token <TKey, TUser>> | Improve this Doc View Source DeleteTokenAsync(String) Declaration public async Task DeleteTokenAsync(string userId) Parameters Type Name Description System.String userId Returns Type Description Task | Improve this Doc View Source FindByUserAsync(TUser) Declaration public async Task<List<Token<TKey, TUser>>> FindByUserAsync(TUser user) Parameters Type Name Description TUser user Returns Type Description Task < List < Token <TKey, TUser>>> | Improve this Doc View Source FindByUserIdAsync(TKey) Declaration public async Task<List<Token<TKey, TUser>>> FindByUserIdAsync(TKey userId) Parameters Type Name Description TKey userId Returns Type Description Task < List < Token <TKey, TUser>>> | Improve this Doc View Source GetByKey(String) Declaration public async Task<Token<TKey, TUser>> GetByKey(string key) Parameters Type Name Description System.String key Returns Type Description Task < Token <TKey, TUser>> | Improve this Doc View Source GetOrCreate(TKey) Declaration public async Task<Token<TKey, TUser>> GetOrCreate(TKey userId) Parameters Type Name Description TKey userId Returns Type Description Task < Token <TKey, TUser>>"
  },
  "api/AuthEndpoints.TokenAuth.html": {
    "href": "api/AuthEndpoints.TokenAuth.html",
    "title": "Namespace AuthEndpoints.TokenAuth | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.TokenAuth Classes AuthenticationBuilderExtensions TokenAuthEndpoints<TKey, TUser, TContext> TokenAuthLoginService<TKey, TUser, TContext> Use this class to log a user in using tokenauth. TokenAuthServiceCollectionExtensions"
  },
  "api/AuthEndpoints.TokenAuth.TokenAuthEndpoints-3.html": {
    "href": "api/AuthEndpoints.TokenAuth.TokenAuthEndpoints-3.html",
    "title": "Class TokenAuthEndpoints<TKey, TUser, TContext> | AuthEndpoints",
    "keywords": "Class TokenAuthEndpoints<TKey, TUser, TContext> Inheritance System.Object TokenAuthEndpoints<TKey, TUser, TContext> Implements IEndpointDefinition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth Assembly : AuthEndpoints.TokenAuth.dll Syntax public class TokenAuthEndpoints<TKey, TUser, TContext> : IEndpointDefinition where TKey : class, IEquatable<TKey> where TUser : IdentityUser<TKey> where TContext : DbContext Type Parameters Name Description TKey TUser TContext Methods | Improve this Doc View Source Create(LoginRequest, TokenRepository<TKey, TUser, TContext>, IAuthenticator<TUser>, UserManager<TUser>) Declaration public virtual async Task<IResult> Create([FromBody] LoginRequest request, TokenRepository<TKey, TUser, TContext> tokenRepository, IAuthenticator<TUser> authenticator, UserManager<TUser> userManager) Parameters Type Name Description LoginRequest request TokenRepository <TKey, TUser, TContext> tokenRepository IAuthenticator <TUser> authenticator Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source Destroy(HttpContext, TokenRepository<TKey, TUser, TContext>) Declaration [Authorize(AuthenticationSchemes = \"Bearer\")] public virtual async Task<IResult> Destroy(HttpContext context, TokenRepository<TKey, TUser, TContext> tokenRepository) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context TokenRepository <TKey, TUser, TContext> tokenRepository Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app Implements IEndpointDefinition"
  },
  "api/AuthEndpoints.TokenAuth.TokenAuthLoginService-3.html": {
    "href": "api/AuthEndpoints.TokenAuth.TokenAuthLoginService-3.html",
    "title": "Class TokenAuthLoginService<TKey, TUser, TContext> | AuthEndpoints",
    "keywords": "Class TokenAuthLoginService<TKey, TUser, TContext> Use this class to log a user in using tokenauth. Inheritance System.Object TokenAuthLoginService<TKey, TUser, TContext> Implements ILoginService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth Assembly : AuthEndpoints.TokenAuth.dll Syntax public class TokenAuthLoginService<TKey, TUser, TContext> : ILoginService where TKey : class, IEquatable<TKey> where TUser : IdentityUser<TKey> where TContext : DbContext Type Parameters Name Description TKey TUser TContext Constructors | Improve this Doc View Source TokenAuthLoginService(TokenRepository<TKey, TUser, TContext>, UserManager<TUser>) Declaration public TokenAuthLoginService(TokenRepository<TKey, TUser, TContext> tokenRepository, UserManager<TUser> userManager) Parameters Type Name Description TokenRepository <TKey, TUser, TContext> tokenRepository Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Methods | Improve this Doc View Source LoginAsync(ClaimsPrincipal) Use this method to log a user in Declaration public async Task<object> LoginAsync(ClaimsPrincipal user) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Returns Type Description Task < System.Object > TokenAuthResponse Implements ILoginService"
  },
  "api/AuthEndpoints.TokenAuth.TokenAuthServiceCollectionExtensions.html": {
    "href": "api/AuthEndpoints.TokenAuth.TokenAuthServiceCollectionExtensions.html",
    "title": "Class TokenAuthServiceCollectionExtensions | AuthEndpoints",
    "keywords": "Class TokenAuthServiceCollectionExtensions Inheritance System.Object TokenAuthServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.TokenAuth Assembly : AuthEndpoints.TokenAuth.dll Syntax public static class TokenAuthServiceCollectionExtensions Methods | Improve this Doc View Source AddTokenAuthCore<TUser, TContext>(IServiceCollection) Declaration public static TokenAuthBuilder AddTokenAuthCore<TUser, TContext>(this IServiceCollection services) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description TokenAuthBuilder Type Parameters Name Description TUser TContext | Improve this Doc View Source AddTokenAuthEndpoints<TUser, TContext>(IServiceCollection) Declaration public static TokenAuthBuilder AddTokenAuthEndpoints<TUser, TContext>(this IServiceCollection services) where TUser : class where TContext : DbContext Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description TokenAuthBuilder Type Parameters Name Description TUser TContext"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | AuthEndpoints",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "index.html": {
    "href": "index.html",
    "title": "AuthEndpoints | AuthEndpoints",
    "keywords": "AuthEndpoints A simple jwt authentication library for ASP.Net 6. AuthEndpoints library provides a set of API controllers to handle basic web & JWT authentication actions such as registration, login, reset password, etc. It works with custom identity user model . AuthEndpoints is built with the aim of increasing developer productivity. Installing via NuGet The easiest way to install AuthEndpoints is via NuGet Install the library using the following .net cli command: dotnet add package AuthEndpoints or in Visual Studio's Package Manager Console, enter the following command: Install-Package AuthEndpoints Get started Contributing Your contributions are always welcome! simply send a pull request! The up-for-grabs label is a great place to start. If you find a flaw, please open an issue or a PR and let's sort things out. The documentation is far from perfect so every bit of help is more than welcome."
  },
  "wiki/authorization.html": {
    "href": "wiki/authorization.html",
    "title": "Authorize with JWT bearer authentication scheme | AuthEndpoints",
    "keywords": "Authorize with JWT bearer authentication scheme The following code limits access to the MyController to jwt authenticated users: using Microsoft.AspNetCore.Authorization; [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)] public class MyController : ControllerBase {} If you want to apply authorization to an action rather than the controller, apply the Authorize attribute to the action itself: using Microsoft.AspNetCore.Authorization; public class MyController : ControllerBase { public ActionResult Get() {} [Authorize(AuthenticationSchemes = \"jwt\")] public ActionResult Post() {} } Read more about authorization with a specific scheme at the documentation"
  },
  "wiki/custom-authenticator.html": {
    "href": "wiki/custom-authenticator.html",
    "title": "Writing an Authenticator | AuthEndpoints",
    "keywords": "Writing an Authenticator By default, AuthEndpoints authenticate users via username. If you want to change this behavior, for example, you want to authenticate a user via email, then you need to write a custom authenticator. Something like this will work: public class MyAuthenticator : IAuthenticator<IdentityUser> { public async Task<IdentityUser?> Authenticate(string email, string password) { var user = await userManager.FindByEmailAsync(email); if (user == null) { return null; } if (!user.EmailConfirmed) { return null; } bool correctPassword = await userManager.CheckPasswordAsync(user, password); if (!correctPassword) { return null; } return user; } public Task<AuthenticatedUserResponse> Login(IdentityUser user) { ... } } finally, register it via AuthEndpointsBuilder.AddAuthenticator<>() : var builder = services.AddAuthEndpointsCore<IdentityUser>(); builder.AddAuthenticator<MyAuthenticator>();"
  },
  "wiki/custom-claims.html": {
    "href": "wiki/custom-claims.html",
    "title": "Token Claims | AuthEndpoints",
    "keywords": "Token Claims JSON web tokens (JWTs) claims are pieces of information asserted about a subject. In a JWT, a claim appears as a name/value pair where the name is always a string and the value can be any JSON value. Generally, when we talk about a claim in the context of a JWT, we are referring to the name (or key). By default AuthEndpoints add 2 custom claims to an access token, user id and username. And add 1 custom claim to a refresh token, user id. To change this, you can write a custom claims provider. Something like this will work: public class MyClaimsProvider : IClaimsProvider<MyApplicationUser> { public IList<Claim> provideAccessClaims(TUser user) { return new List<Claim>() { new Claim(\"id\", user.Id.ToString()!), new Claim(ClaimTypes.Name, user.UserName), }; } public IList<Claim> provideRefreshClaims(TUser user) { return new List<Claim>() { new Claim(\"id\", user.Id.ToString()!), new Claim(ClaimTypes.Name, user.UserName), }; } } then, add it using AuthEndpointsBuilder.AddClaimsProvider<>(); SimpleJwtBuilder jwtBuilder = builder.Services .AddSimpleJwtEndpoints<IdentityUser, MyDbContext>(); jwtBuilder.AddClaimsProvider<MyClaimsProvider>();"
  },
  "wiki/email-config.html": {
    "href": "wiki/email-config.html",
    "title": "Email Backend | AuthEndpoints",
    "keywords": "Email Backend AuthEndpoints library uses MailKit library for the creation and parsing of messages, and sending an email. Learn more about MailKit here Configuring Email Settings You can configure email backend settings via AuthEndpointsOptions , for example: var builder = builder.Services.AddAuthEndpointsCore<string, IdentityUser>(options => { ... // URL to your frontend email verification page. It should contain {uid} and {token} options.EmailConfirmationUrl = \"https://myfrontend.com/account/verify-email/{uid}/{token}\"; // URL to your frontend password reset page. It should contain {uid} and {token} options.PasswordResetUrl = \"https://myfrontend.com/account/password-reset/{uid}/{token}\"; options.EmailOptions = new EmailOptions() { From = \"your@gmail.com\", Host = \"smtp.gmail.com\", Port = 587, User = \"<gmail_app_user>\", Password = \"<gmail_app_password>\", } }); Custom Email Factory You can customize the content of the email by implementing IEmailFactory, for example: public class MyEmailFactory : IEmailFactory { // returns a MimeMessage that will be sendt by the IEmailSender. public MimeMessage CreateConfirmationEmail(EmailData data); // returns a MimeMessage that will be sent by the IEmailSender. public MimeMessage CreateResetPasswordEmail(EmailData data); } then register it via AuthEndpointsBuilder.AddEmailFactory : builder.AddEmailFactory<MyEmailFactory>(); Learn more about creating a MIME messages using MimeKit here Custom Email Sender The default implementation of IEmailSender , DefaultEmailSender uses SmtpClient to send an email. You can write your own email sender by implementing IEmailSender , for example: public class MyEmailSender : IEmailSender { public void SendEmail(MimeMessage message); public void SendEmailAsync(MimeMessage message); } then register it via AuthEndpointsBuilder.AddEmailSender : builder.AddEmailSender<MyEmailSender>(); Learn more about using MailKit here"
  },
  "wiki/email-verification.html": {
    "href": "wiki/email-verification.html",
    "title": "Email Verification Flow | AuthEndpoints",
    "keywords": "Email Verification Flow The workflow should look like this: User click on a verify email button in frontend app, which will send GET request to the email verification endpoint, /users/verify_email by default. Api server will then send an email verification link to the user via email. You should provide site in your frontend application (configured by AuthEndpointsOptions.EmailConfirmationUrl). User click on the link and will get redirected to email verification page (in frontend app). Frontend app will then send a POST request to the confirm email verification endpoint, /users/verify_email_confirm by default. Api server will respond with Status204NoContent if succeeded. Configuring options var builder = builder.Services.AddAuthEndpointsCore<IdentityUser>(options => { // will be sent to the user via email. options.EmailConfirmationUrl = \"https://myfrontend.com/account/verify-email-confirm/{uid}/{token}\" // Make sure email options are properly setup. options.EmailOptions = new EmailOptions() { Host = \"smtp.gmail.com\", From = Environment.GetEnvironmentVariable(\"GOOGLE_MAIL_APP_USER\")!, Port = 587, User = Environment.GetEnvironmentVariable(\"GOOGLE_MAIL_APP_USER\")!, Password = Environment.GetEnvironmentVariable(\"GOOGLE_MAIL_APP_PASSWORD\")!, }; }); Checkout how to configure email options Endpoints User Verify Email Use this endpoint to send email verification link via email. You should provide site in your frontend application (configured by AuthEndpointsOptions.EmailConfirmationUrl) which will send POST request to verify email confirmation endpoint. Default URL : /users/verify_email Authorizations : (Jwt) Method Request Response GET - HTTP_204_NO_CONTENT, HTTP_401_UNAUTHORIZED User Verify Email Confirmation Use this endpoint to finish email verification process. Default URL : /users/verify_email_confirm Authorizations : (Jwt or None) Method Request Response POST identity token HTTP_204_NO_CONTENT, HTTP_400_BAD_REQUEST, HTTP_401_UNAUTHORIZED, HTTP_409_CONFLICT"
  },
  "wiki/encryption-type.html": {
    "href": "wiki/encryption-type.html",
    "title": "Configuring Enryption Type | AuthEndpoints",
    "keywords": "Configuring Enryption Type Symmetric Encryption AuthEndpoints default options for signing and validating jwts use a single security key, this is being called a symmetric encryption. Distributing the key in a secure way is one of the primary challenges of this encryption type, this also known as key distribution problem. Symmetric enryption allows anyone that has access to the key that the token was encrypted with, can also decrypt it. To use symmetric HMAC signing and verification, the following algorithms may be used: 'HS256', 'HS384', 'HS512'. When an HMAC algorithm is chosen, the SecurityKey in AccessSigningOptions and RefreshSigningOptions will be used as both the signing key and the verifying key. Asymmetric Encryption On the other hand, Asymmetric Encryption is based on two keys, a public key, and a private key. The public key is used to validate jwt. And the private key is used to sign the jwt. To use asymmetric RSA signing and verification, the following algorithms may be used: 'RS256', 'RS384', 'RS512'. When an RSA algorithm is chosen, the SigningKey setting must be set to an RsaSecurityKey that contains an RSA private key. Likewise, the TokenValidationParammeters setting must be set to an RsaSecurityKey that contains an RSA public key. using var privateRsa = RSA.Create(); using var publicRsa = RSA.Create(); privateRsa.FromXmlString(\"<your_private_key>\"); publicRsa.FromXmlString(\"<your_public_key>\"); var accessValidationParam = new TokenValidationParameters() { IssuerSigningKey = new RsaSecurityKey(publicRsa), // Verify with public key ValidIssuer = \"https://localhost:8000\", ValidAudience = \"https://localhost:8000\", ValidateIssuerSigningKey = true, ClockSkew = TimeSpan.Zero, }; builder.Services.AddAuthEndpointsCore<MyCustomIdentityUser>(new AuthEndpointsOptions() { // Use private keys for signing options AccessSigningOptions = new JwtSigningOptions() { SigningKey = new RsaSecurityKey(privateRsa), // Sign with private key Algorithm = SecurityAlgorithms.RsaSha256, // Use \"RS256\" algorithm ExpirationMinutes = 120, }, // AccessValidationParameters will be used for verifying access jwts AccessValidationParameters = accessValidationParam, // verify with public key RefreshSigningOptions = new JwtSigningOptions() { SigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"<secret_key>\")), Algorithm = SecurityAlgorithms.HmacSha256, ExpirationMinutes = 120, }, Audience = \"https://localhost:8000\", Issuer = \"https://localhost:8000\", });"
  },
  "wiki/endpoints/2fa.html": {
    "href": "wiki/endpoints/2fa.html",
    "title": "2FA Endpoints | AuthEndpoints",
    "keywords": "2FA Endpoints TwoStepVerificationController<TUserKey, TUser> 2FA Enable Use this endpoint to send email with 2fa token for enabling 2fa. Default URL : /users/enable_2fa Authorizations : (Jwt) Method Request Response GET - HTTP_200_OK, HTTP_400_BAD_REQUEST, HTTP_401_UNAUTHORIZED 2FA Enable Confirm Use this endpoint to finish enabling 2fa process. Default URL : /users/enable_2fa_confirm Authorizations : (Jwt) Method Request Response POST Email Provider Token HTTP_200_OK, HTTP_400_BAD_REQUEST, HTTP_401_UNAUTHORIZED 2FA Login Use this endpoint to login with 2fa process. Default URL : /users/two_step_verification_login Authorizations : (None) Method Request Response POST username password provider HTTP_200_OK HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_404_NOT_FOUND 2FA Login Confirm Use this endpoint to login with 2fa process. Default URL : /users/two_step_verification_confirm Authorizations : (None) Method Request Response POST email provider token HTTP_200_OK HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_404_NOT_FOUND"
  },
  "wiki/endpoints/base-endpoints.html": {
    "href": "wiki/endpoints/base-endpoints.html",
    "title": "Base Endpoints | AuthEndpoints",
    "keywords": "Base Endpoints BaseEndpointsController<TUserKey, TUser> User Create Use this endpoint to register new user. Default URL : /users Authorizations : (None) Method Request Response POST email username password confirmPassword HTTP_200_OK HTTP_400_BAD_REQUEST User Verify Email Use this endpoint to send email verification link via email. You should provide site in your frontend application (configured by AuthEndpointsOptions.EmailConfirmationUrl) which will send POST request to verify email confirmation endpoint. Default URL : /users/verify_email Authorizations : (Jwt) Method Request Response GET - HTTP_204_NO_CONTENT, HTTP_401_UNAUTHORIZED User Verify Email Confirmation Use this endpoint to finish email verification process. Default URL : /users/verify_email_confirm Authorizations : (Jwt or None) Method Request Response POST identity token HTTP_204_NO_CONTENT, HTTP_400_BAD_REQUEST, HTTP_401_UNAUTHORIZED, HTTP_409_CONFLICT User Retrieve Use this endpoint to retrieve the authenticated user data. Default URL : /users/me Authorizations : (Jwt) Method Request Response GET - HTTP_200_OK User data Set Password Use this endpoint to change user password. Default URL : /users/set_password Authorizations : (Jwt) Method Request Response POST currentPassword newPassword confirmNewPassword HTTP_204_NO_CONTENT HTTP_400_BAD_REQUEST Reset Password Use this endpoint to send email to user with password reset link. You should provide site in your frontend application (configured by AuthEndpointsOptions.PasswordResetUrl) which will send POST request to reset password confirmation endpoint. Default URL : /users/reset_password Authorizations : (None) Method Request Response POST Email HTTP_204_NO_CONTENT HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_404_NOT_FOUND Reset Password Confirmation Use this endpoint to finish reset password process. Default URL : /users/reset_password_confirm Authorizations : (None) Method Request Response POST identity token newPassword confirmNewPassword HTTP_204_NO_CONTENT HTTP_400_BAD_REQUEST HTTP_404_NOT_FOUND HTTP_409_CONFLICT"
  },
  "wiki/endpoints/definitions.html": {
    "href": "wiki/endpoints/definitions.html",
    "title": "Using IEndpointDefinition | AuthEndpoints",
    "keywords": "Using IEndpointDefinition You can define your own minimal api endpoint definition by implementing the IEndpointDefintion interface. internal class MyEndpointsDefinition : IEndpointDefinition { public void MapEndpoints(WebApplication app) { app.MapGet(\"/helloworld\", HelloWorldEndpoint); } private Task<IResult> HelloWorldEndpoint() { return Task.FromResult(Results.Ok()); } } Add your endpoint definition builder.Services.AddEndpointDefinition<MyEndpointDefinition>(); // <-- var app = builder.Build(); ... app.UseAuthentication(); app.UseAuthorization(); ... app.MapEndpoints(); // <-- app.Run();"
  },
  "wiki/endpoints/jwt.html": {
    "href": "wiki/endpoints/jwt.html",
    "title": "JWT Endpoints | AuthEndpoints",
    "keywords": "JWT Endpoints JwtController<TUserKey, TUser> JWT Create Use this endpoint to obtain jwt. Default URL : /jwt/create Authorizations : (Jwt or None) Method Request Response POST username password HTTP_200_OK accessToken refreshToken HTTP_401_UNAUTHORIZED JWT Refresh Use this endpoint to refresh jwt. Default URL : /jwt/refresh Authorizations : (Jwt) Method Request Response POST refreshToken HTTP_200_OK accessToken JWT Verify Use this endpoint to verify access jwt. Default URL : /users/set_password Authorizations : (Jwt) Method Request Response GET - HTTP_200_OK HTTP_401_UNAUTHORIZED"
  },
  "wiki/get-started.html": {
    "href": "wiki/get-started.html",
    "title": "Getting started | AuthEndpoints",
    "keywords": "Getting started Follow steps below to install and use AuthEndpoints. Create a project Create a web api ASP.NET Core project dotnet new webapi -n MyNewWebApp Install nuget package Install the library using the following .net cli command: dotnet add package AuthEndpoints or with nuget package manager: Install-Package AuthEndpoints Quick Start First, let's create a DbContext: // Data/MyDbContext.cs using AuthEndpoints.Core.Models; using Microsoft.EntityFrameworkCore; namespace MyNewWebApp.Data; public class MyDbContext : DbContext { DbSet<IdentityUser>? Users { get; set; } DbSet<RefreshToken>? RefreshTokens { get; set; } public MyDbContext(DbContextOptions<MyDbContext> options) : base(options) { } } Configure database provider for MyDbContext and then add the required identity services: // Program.cs builder.Services.AddDbContext<MyDbContext>(options => { // Configure database provider for `MyDbContext` }); builder.Services .AddIdentityCore<IdentityUser>() // <-- or `AddIdentity<,>` .AddEntityFrameworkStores<MyDbContext>() // <-- .AddDefaultTokenProviders(); // <-- Next, let's add auth endpoints services: // Program.cs // Add users api endpoints builder.Services .AddAuthEndpointsCore<IdentityUser, MyDbContext>() // <-- .AddUsersApiEndpoints() .Add2FAEndpoints(); // Add JWT endpoints builder.Services.AddSimpleJwtEndpoints<IdentityUser, MyDbContext>(); then finally, call app.MapEndpoints() before app.Run() : // Program.cs ... var app = builder.Build(); ... app.UseAuthentication(); // <-- app.UseAuthorization(); // <-- ... app.MapEndpoints(); // <-- app.Run(); Run it and you should see endpoints available on swagger docs! Full Source Code // Program.cs using AuthEndpoints.Core; using AuthEndpoints.MinimalApi; using AuthEndpoints.SimpleJwt; using Microsoft.AspNetCore.Identity; using MyNewWebApp.Data; var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); builder.Services.AddDbContext<MyDbContext>(options => { // Configure database provider for `MyDbContext` here // ... }); builder.Services .AddIdentityCore<IdentityUser>() // <-- .AddEntityFrameworkStores<MyDbContext>() // <-- Microsoft.AspNetCore.Identity.EntityFrameworkCore .AddDefaultTokenProviders(); // <-- // Add basic authentication builder.Services .AddAuthEndpointsCore<IdentityUser>() // <-- .AddUsersApiEndpoints() .Add2FAEndpoints(); // Add JWT endpoints builder.Services.AddSimpleJwtEndpoints<IdentityUser, MyDbContext>(); var app = builder.Build(); // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI(); } app.UseHttpsRedirection(); app.UseAuthentication(); // <-- app.UseAuthorization(); // <-- app.MapControllers(); app.MapEndpoints(); // <-- Map minimal api endpoints app.Run(); Available Endpoints Checkout endpoints definition docs Users endpoints JWT endpoints 2FA endpoints"
  },
  "wiki/password-reset.html": {
    "href": "wiki/password-reset.html",
    "title": "Password Reset Flow | AuthEndpoints",
    "keywords": "Password Reset Flow The workflow should look like this: User click on a forgot password button in frontend app. Frontend app will then ask user to input the email for account. User click on the submit button which will send a post request to the api server, /users/reset_password by default. Api server will then send a reset password link to the user via email. You should provide site in your frontend application (configured by AuthEndpointsOptions.PasswordResetUrl). User click on the link and will get redirected to reset password page on frontend app. User enter a new password. User submit the form, which will send POST request to the password reset confirmation endpoint, /users/reset_password_confirm by default. Api server will respond with Status204NoContent if succeeded. Configuring options var builder = builder.Services.AddAuthEndpointsCore<IdentityUser>(options => { // will be sent to the user via email. options.PasswordResetUrl = \"https://myfrontend.com/account/reset-password-confirm/{uid}/{token}\" // Make sure email options are properly setup. options.EmailOptions = new EmailOptions() { Host = \"smtp.gmail.com\", From = Environment.GetEnvironmentVariable(\"GOOGLE_MAIL_APP_USER\")!, Port = 587, User = Environment.GetEnvironmentVariable(\"GOOGLE_MAIL_APP_USER\")!, Password = Environment.GetEnvironmentVariable(\"GOOGLE_MAIL_APP_PASSWORD\")!, }; }); Checkout how to configure email options Endpoints Reset Password Use this endpoint to send email to user with password reset link. You should provide site in your frontend application (configured by AuthEndpointsOptions.PasswordResetUrl) which will send POST request to reset password confirmation endpoint. Default URL : /users/reset_password Authorizations : (None) Method Request Response POST Email HTTP_204_NO_CONTENT HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_404_NOT_FOUND Reset Password Confirmation Use this endpoint to finish reset password process. Default URL : /users/reset_password_confirm Authorizations : (None) Method Request Response POST identity token newPassword confirmNewPassword HTTP_204_NO_CONTENT HTTP_400_BAD_REQUEST HTTP_404_NOT_FOUND HTTP_409_CONFLICT"
  }
}