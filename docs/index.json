{
  "api/AuthEndpoints.AuthEndpointsBuilder.html": {
    "href": "api/AuthEndpoints.AuthEndpointsBuilder.html",
    "title": "Class AuthEndpointsBuilder | AuthEndpoints",
    "keywords": "Class AuthEndpointsBuilder Helper functions for configuring AuthEndpoints services. Inheritance System.Object AuthEndpointsBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints Assembly : AuthEndpoints.Core.dll Syntax public class AuthEndpointsBuilder Constructors | Improve this Doc View Source AuthEndpointsBuilder(Type, Type, IServiceCollection, AuthEndpointsOptions) Creates a new instance of AuthEndpointsBuilder . Declaration public AuthEndpointsBuilder(Type userKeyType, Type userType, IServiceCollection services, AuthEndpointsOptions options) Parameters Type Name Description Type userKeyType Type userType The type to use for the users. Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to attach to. AuthEndpointsOptions options Properties | Improve this Doc View Source Options Gets the AuthEndpointsOptions Declaration public AuthEndpointsOptions Options { get; } Property Value Type Description AuthEndpointsOptions Gets the AuthEndpointsOptions | Improve this Doc View Source Services Gets the Microsoft.Extensions.DependencyInjection.IServiceCollection services are attached to. Declaration public IServiceCollection Services { get; } Property Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The Microsoft.Extensions.DependencyInjection.IServiceCollection services are attached to. | Improve this Doc View Source UserKeyType Gets the type used for user id. Declaration public Type UserKeyType { get; } Property Value Type Description Type The type used for user id. | Improve this Doc View Source UserType Gets the type used for users. Declaration public Type UserType { get; } Property Value Type Description Type The type used for users. Methods | Improve this Doc View Source AddAuthenticator<TAuthenticator>() Adds an IAuthenticator<TUser> . Declaration public virtual AuthEndpointsBuilder AddAuthenticator<TAuthenticator>() where TAuthenticator : class Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TAuthenticator The type of the authenticator. | Improve this Doc View Source AddClaimsProvider<TProvider>() Adds an IClaimsProvider<TUser> . Declaration public virtual AuthEndpointsBuilder AddClaimsProvider<TProvider>() where TProvider : class Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TProvider The type of the claims provider. | Improve this Doc View Source AddEmailFactory<TEmailFactory>() Adds an IEmailFactory Declaration public virtual AuthEndpointsBuilder AddEmailFactory<TEmailFactory>() where TEmailFactory : IEmailFactory Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TEmailFactory | Improve this Doc View Source AddEmailSender<TSender>() Adds an IEmailSender Declaration public virtual AuthEndpointsBuilder AddEmailSender<TSender>() where TSender : IEmailSender Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TSender | Improve this Doc View Source AddErrorDescriber<TDescriber>() Adds an Microsoft.AspNetCore.Identity.IdentityErrorDescriber . Declaration public virtual AuthEndpointsBuilder AddErrorDescriber<TDescriber>() where TDescriber : IdentityErrorDescriber Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TDescriber The type of the error describer. | Improve this Doc View Source AddJwtBearerAuthScheme() Adds a jwt bearer defaults authentication scheme. Declaration public virtual AuthEndpointsBuilder AddJwtBearerAuthScheme() Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. | Improve this Doc View Source AddJwtBearerAuthScheme(TokenValidationParameters) Adds a jwt bearer defaults authentication scheme. Declaration public virtual AuthEndpointsBuilder AddJwtBearerAuthScheme(TokenValidationParameters parameters) Parameters Type Name Description Microsoft.IdentityModel.Tokens.TokenValidationParameters parameters Token validation parameters for JwtBearerOptions Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. | Improve this Doc View Source AddJwtFactory<TGenerator>() Adds an IJwtFactory . Declaration public virtual AuthEndpointsBuilder AddJwtFactory<TGenerator>() where TGenerator : IJwtFactory Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TGenerator The type of the jwt factory. | Improve this Doc View Source AddJwtValidator<TValidator>() Adds an IJwtValidator Declaration public virtual AuthEndpointsBuilder AddJwtValidator<TValidator>() where TValidator : IJwtValidator Returns Type Description AuthEndpointsBuilder The current AuthEndpointsBuilder instance. Type Parameters Name Description TValidator The type of the jwt validator | Improve this Doc View Source AddScoped(Type, Type) Declaration protected AuthEndpointsBuilder AddScoped(Type serviceType, Type concreteType) Parameters Type Name Description Type serviceType Type concreteType Returns Type Description AuthEndpointsBuilder"
  },
  "api/AuthEndpoints.AuthEndpointsOptions.html": {
    "href": "api/AuthEndpoints.AuthEndpointsOptions.html",
    "title": "Class AuthEndpointsOptions | AuthEndpoints",
    "keywords": "Class AuthEndpointsOptions Represents all the options you can use to configure the AuthEndpoints system. Inheritance System.Object AuthEndpointsOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints Assembly : AuthEndpoints.Core.dll Syntax public class AuthEndpointsOptions Fields | Improve this Doc View Source Key Declaration public const string Key = \"AuthEndpoints\" Field Value Type Description System.String Properties | Improve this Doc View Source AccessSigningOptions Signing options used for signing access jwts Declaration public JwtSigningOptions AccessSigningOptions { get; set; } Property Value Type Description JwtSigningOptions | Improve this Doc View Source AccessValidationParameters Validation parameters used for verifying access jwts Declaration public TokenValidationParameters AccessValidationParameters { get; set; } Property Value Type Description Microsoft.IdentityModel.Tokens.TokenValidationParameters | Improve this Doc View Source Audience Declaration public string Audience { get; set; } Property Value Type Description System.String | Improve this Doc View Source EmailConfirmationUrl URL to your frontend email verification page. Declaration public string EmailConfirmationUrl { get; set; } Property Value Type Description System.String | Improve this Doc View Source EmailOptions Email configuration used for sending reset password link or verification email link via email. Declaration public EmailOptions EmailOptions { get; set; } Property Value Type Description EmailOptions | Improve this Doc View Source Issuer Declaration public string Issuer { get; set; } Property Value Type Description System.String | Improve this Doc View Source PasswordResetUrl URL to your frontend password reset page. Declaration public string PasswordResetUrl { get; set; } Property Value Type Description System.String | Improve this Doc View Source RefreshSigningOptions Signing options used for signing refresh jwts Declaration public JwtSigningOptions RefreshSigningOptions { get; set; } Property Value Type Description JwtSigningOptions | Improve this Doc View Source RefreshValidationParameters Validation parameters used for verifying refresh jwts Declaration public TokenValidationParameters RefreshValidationParameters { get; set; } Property Value Type Description Microsoft.IdentityModel.Tokens.TokenValidationParameters"
  },
  "api/AuthEndpoints.Controllers.BaseEndpointsController-2.html": {
    "href": "api/AuthEndpoints.Controllers.BaseEndpointsController-2.html",
    "title": "Class BaseEndpointsController<TUserKey, TUser> | AuthEndpoints",
    "keywords": "Class BaseEndpointsController<TUserKey, TUser> Inherit this base class to define endpoints that contain base authentication actions such as registration, set password, etc. Inheritance System.Object Microsoft.AspNetCore.Mvc.ControllerBase BaseEndpointsController<TUserKey, TUser> Inherited Members Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32) Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, System.String, System.Text.Encoding) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.NoContent() Microsoft.AspNetCore.Mvc.ControllerBase.Ok() Microsoft.AspNetCore.Mvc.ControllerBase.Ok(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Redirect(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanentPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirect(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanentPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction() Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanentPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePreserveMethod(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanentPreserveMethod(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanentPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized() Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.NotFound() Microsoft.AspNetCore.Mvc.ControllerBase.NotFound(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest() Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity() Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Conflict() Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Problem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ValidationProblemDetails) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem() Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.Uri, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted() Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge() Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid() Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut() Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, System.Linq.Expressions.Expression<System.Func<TModel, System.Object>>[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Linq.Expressions.Expression<System.Func<TModel, System.Object>>[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object, System.Type, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object, System.Type, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.HttpContext Microsoft.AspNetCore.Mvc.ControllerBase.Request Microsoft.AspNetCore.Mvc.ControllerBase.Response Microsoft.AspNetCore.Mvc.ControllerBase.RouteData Microsoft.AspNetCore.Mvc.ControllerBase.ModelState Microsoft.AspNetCore.Mvc.ControllerBase.ControllerContext Microsoft.AspNetCore.Mvc.ControllerBase.MetadataProvider Microsoft.AspNetCore.Mvc.ControllerBase.ModelBinderFactory Microsoft.AspNetCore.Mvc.ControllerBase.Url Microsoft.AspNetCore.Mvc.ControllerBase.ObjectValidator Microsoft.AspNetCore.Mvc.ControllerBase.ProblemDetailsFactory Microsoft.AspNetCore.Mvc.ControllerBase.User System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Controllers Assembly : AuthEndpoints.dll Syntax [Route(\"users/\")] [ApiController] public class BaseEndpointsController<TUserKey, TUser> : ControllerBase where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey>, new() Type Parameters Name Description TUserKey TUser Constructors | Improve this Doc View Source BaseEndpointsController(UserManager<TUser>, IdentityErrorDescriber, IOptions<AuthEndpointsOptions>, IEmailSender, IEmailFactory) Declaration public BaseEndpointsController(UserManager<TUser> userManager, IdentityErrorDescriber errorDescriber, IOptions<AuthEndpointsOptions> options, IEmailSender emailSender, IEmailFactory emailFactory) Parameters Type Name Description Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.AspNetCore.Identity.IdentityErrorDescriber errorDescriber Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options IEmailSender emailSender IEmailFactory emailFactory Fields | Improve this Doc View Source emailFactory Declaration protected readonly IEmailFactory emailFactory Field Value Type Description IEmailFactory | Improve this Doc View Source emailSender Declaration protected readonly IEmailSender emailSender Field Value Type Description IEmailSender | Improve this Doc View Source errorDescriber Declaration protected readonly IdentityErrorDescriber errorDescriber Field Value Type Description Microsoft.AspNetCore.Identity.IdentityErrorDescriber | Improve this Doc View Source options Declaration protected readonly AuthEndpointsOptions options Field Value Type Description AuthEndpointsOptions | Improve this Doc View Source userManager Declaration protected readonly UserManager<TUser> userManager Field Value Type Description Microsoft.AspNetCore.Identity.UserManager <TUser> Methods | Improve this Doc View Source Delete() Use this endpoint to delete authenticated user. Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpDelete(\"delete\")] public virtual async Task<IActionResult> Delete() Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source EmailVerification() Use this endpoints to send email verification link via email You should provide site in your frontend application (configured by EmailConfirmationUrl ) which will send POST request to verify email confirmation endpoint. Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpGet(\"verify_email\")] public virtual async Task<IActionResult> EmailVerification() Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source EmailVerificationConfirm(ConfirmEmailRequest) Use this endpoint to confirm user email. Declaration [HttpPost(\"verify_email_confirm\")] public virtual async Task<IActionResult> EmailVerificationConfirm([FromBody] ConfirmEmailRequest request) Parameters Type Name Description ConfirmEmailRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source GetMe() Use this endpoint to retrieve the authenticated user Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpGet(\"me\")] public virtual async Task<IActionResult> GetMe() Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source Register(RegisterRequest) Use this endpoint to register a new user Declaration [HttpPost(\"\")] public virtual async Task<IActionResult> Register([FromBody] RegisterRequest request) Parameters Type Name Description RegisterRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source ResetPassword(ResetPasswordRequest) Use this endpoint to send email to user with password reset link. You should provide site in your frontend application (configured by PasswordResetUrl ) which will send POST request to reset password confirmation endpoint. Declaration [HttpPost(\"reset_password\")] public virtual async Task<IActionResult> ResetPassword([FromBody] ResetPasswordRequest request) Parameters Type Name Description ResetPasswordRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source ResetPasswordConfirm(ResetPasswordConfirmRequest) Use this endpoint to finish reset password process. Declaration [HttpPost(\"reset_password_confirm\")] public virtual async Task<IActionResult> ResetPasswordConfirm([FromBody] ResetPasswordConfirmRequest request) Parameters Type Name Description ResetPasswordConfirmRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source SetPassword(SetPasswordRequest) Use this endpoint to change user password Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpPost(\"set_password\")] public virtual async Task<IActionResult> SetPassword([FromBody] SetPasswordRequest request) Parameters Type Name Description SetPasswordRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source SetUsername(SetUsernameRequest) Use this endpoint to change user's username Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpPost(\"set_username\")] public virtual async Task<IActionResult> SetUsername([FromBody] SetUsernameRequest request) Parameters Type Name Description SetUsernameRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult >"
  },
  "api/AuthEndpoints.Controllers.BasicAuthenticationController-2.html": {
    "href": "api/AuthEndpoints.Controllers.BasicAuthenticationController-2.html",
    "title": "Class BasicAuthenticationController<TUserKey, TUser> | AuthEndpoints",
    "keywords": "Class BasicAuthenticationController<TUserKey, TUser> Inherit this base class to define endpoints that contain base authentication actions such as registration, set password, etc. Inheritance System.Object Microsoft.AspNetCore.Mvc.ControllerBase BasicAuthenticationController<TUserKey, TUser> Inherited Members Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32) Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, System.String, System.Text.Encoding) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.NoContent() Microsoft.AspNetCore.Mvc.ControllerBase.Ok() Microsoft.AspNetCore.Mvc.ControllerBase.Ok(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Redirect(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanentPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirect(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanentPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction() Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanentPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePreserveMethod(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanentPreserveMethod(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanentPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized() Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.NotFound() Microsoft.AspNetCore.Mvc.ControllerBase.NotFound(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest() Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity() Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Conflict() Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Problem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ValidationProblemDetails) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem() Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.Uri, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted() Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge() Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid() Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut() Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, System.Linq.Expressions.Expression<System.Func<TModel, System.Object>>[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Linq.Expressions.Expression<System.Func<TModel, System.Object>>[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object, System.Type, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object, System.Type, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.HttpContext Microsoft.AspNetCore.Mvc.ControllerBase.Request Microsoft.AspNetCore.Mvc.ControllerBase.Response Microsoft.AspNetCore.Mvc.ControllerBase.RouteData Microsoft.AspNetCore.Mvc.ControllerBase.ModelState Microsoft.AspNetCore.Mvc.ControllerBase.ControllerContext Microsoft.AspNetCore.Mvc.ControllerBase.MetadataProvider Microsoft.AspNetCore.Mvc.ControllerBase.ModelBinderFactory Microsoft.AspNetCore.Mvc.ControllerBase.Url Microsoft.AspNetCore.Mvc.ControllerBase.ObjectValidator Microsoft.AspNetCore.Mvc.ControllerBase.ProblemDetailsFactory Microsoft.AspNetCore.Mvc.ControllerBase.User System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Controllers Assembly : AuthEndpoints.dll Syntax [Route(\"users/\")] [ApiController] public class BasicAuthenticationController<TUserKey, TUser> : ControllerBase where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey>, new() Type Parameters Name Description TUserKey TUser Constructors | Improve this Doc View Source BasicAuthenticationController(UserManager<TUser>, IdentityErrorDescriber, IOptions<AuthEndpointsOptions>, IEmailSender, IEmailFactory) Declaration public BasicAuthenticationController(UserManager<TUser> userManager, IdentityErrorDescriber errorDescriber, IOptions<AuthEndpointsOptions> options, IEmailSender emailSender, IEmailFactory emailFactory) Parameters Type Name Description Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.AspNetCore.Identity.IdentityErrorDescriber errorDescriber Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options IEmailSender emailSender IEmailFactory emailFactory Fields | Improve this Doc View Source emailFactory Declaration protected readonly IEmailFactory emailFactory Field Value Type Description IEmailFactory | Improve this Doc View Source emailSender Declaration protected readonly IEmailSender emailSender Field Value Type Description IEmailSender | Improve this Doc View Source errorDescriber Declaration protected readonly IdentityErrorDescriber errorDescriber Field Value Type Description Microsoft.AspNetCore.Identity.IdentityErrorDescriber | Improve this Doc View Source options Declaration protected readonly AuthEndpointsOptions options Field Value Type Description AuthEndpointsOptions | Improve this Doc View Source userManager Declaration protected readonly UserManager<TUser> userManager Field Value Type Description Microsoft.AspNetCore.Identity.UserManager <TUser> Methods | Improve this Doc View Source Delete() Use this endpoint to delete authenticated user. Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpDelete(\"delete\")] public virtual async Task<IActionResult> Delete() Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source EmailVerification() Use this endpoints to send email verification link via email You should provide site in your frontend application (configured by EmailConfirmationUrl ) which will send POST request to verify email confirmation endpoint. Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpGet(\"verify_email\")] public virtual async Task<IActionResult> EmailVerification() Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source EmailVerificationConfirm(ConfirmEmailRequest) Use this endpoint to confirm user email. Declaration [HttpPost(\"verify_email_confirm\")] public virtual async Task<IActionResult> EmailVerificationConfirm([FromBody] ConfirmEmailRequest request) Parameters Type Name Description ConfirmEmailRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source GetMe() Use this endpoint to retrieve the authenticated user Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpGet(\"me\")] public virtual async Task<IActionResult> GetMe() Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source Register(RegisterRequest) Use this endpoint to register a new user Declaration [HttpPost(\"\")] public virtual async Task<IActionResult> Register([FromBody] RegisterRequest request) Parameters Type Name Description RegisterRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source ResetPassword(ResetPasswordRequest) Use this endpoint to send email to user with password reset link. You should provide site in your frontend application (configured by PasswordResetUrl ) which will send POST request to reset password confirmation endpoint. Declaration [HttpPost(\"reset_password\")] public virtual async Task<IActionResult> ResetPassword([FromBody] ResetPasswordRequest request) Parameters Type Name Description ResetPasswordRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source ResetPasswordConfirm(ResetPasswordConfirmRequest) Use this endpoint to finish reset password process. Declaration [HttpPost(\"reset_password_confirm\")] public virtual async Task<IActionResult> ResetPasswordConfirm([FromBody] ResetPasswordConfirmRequest request) Parameters Type Name Description ResetPasswordConfirmRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source SetPassword(SetPasswordRequest) Use this endpoint to change user password Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpPost(\"set_password\")] public virtual async Task<IActionResult> SetPassword([FromBody] SetPasswordRequest request) Parameters Type Name Description SetPasswordRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source SetUsername(SetUsernameRequest) Use this endpoint to change user's username Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpPost(\"set_username\")] public virtual async Task<IActionResult> SetUsername([FromBody] SetUsernameRequest request) Parameters Type Name Description SetUsernameRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult >"
  },
  "api/AuthEndpoints.Controllers.html": {
    "href": "api/AuthEndpoints.Controllers.html",
    "title": "Namespace AuthEndpoints.Controllers | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.Controllers Classes BaseEndpointsController<TUserKey, TUser> Inherit this base class to define endpoints that contain base authentication actions such as registration, set password, etc. BasicAuthenticationController<TUserKey, TUser> Inherit this base class to define endpoints that contain base authentication actions such as registration, set password, etc. JwtController<TUserKey, TUser> Inherit this base class to define endpoints that contain simple jwt auth actions such as create and refresh. TwoStepVerificationController<TUserKey, TUser> Inherit this base class to define endpoints that contain 2fa process actions such as enable 2fa and login."
  },
  "api/AuthEndpoints.Controllers.JwtController-2.html": {
    "href": "api/AuthEndpoints.Controllers.JwtController-2.html",
    "title": "Class JwtController<TUserKey, TUser> | AuthEndpoints",
    "keywords": "Class JwtController<TUserKey, TUser> Inherit this base class to define endpoints that contain simple jwt auth actions such as create and refresh. Inheritance System.Object Microsoft.AspNetCore.Mvc.ControllerBase JwtController<TUserKey, TUser> Inherited Members Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32) Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, System.String, System.Text.Encoding) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.NoContent() Microsoft.AspNetCore.Mvc.ControllerBase.Ok() Microsoft.AspNetCore.Mvc.ControllerBase.Ok(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Redirect(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanentPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirect(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanentPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction() Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanentPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePreserveMethod(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanentPreserveMethod(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanentPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized() Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.NotFound() Microsoft.AspNetCore.Mvc.ControllerBase.NotFound(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest() Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity() Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Conflict() Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Problem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ValidationProblemDetails) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem() Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.Uri, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted() Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge() Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid() Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut() Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, System.Linq.Expressions.Expression<System.Func<TModel, System.Object>>[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Linq.Expressions.Expression<System.Func<TModel, System.Object>>[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object, System.Type, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object, System.Type, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.HttpContext Microsoft.AspNetCore.Mvc.ControllerBase.Request Microsoft.AspNetCore.Mvc.ControllerBase.Response Microsoft.AspNetCore.Mvc.ControllerBase.RouteData Microsoft.AspNetCore.Mvc.ControllerBase.ModelState Microsoft.AspNetCore.Mvc.ControllerBase.ControllerContext Microsoft.AspNetCore.Mvc.ControllerBase.MetadataProvider Microsoft.AspNetCore.Mvc.ControllerBase.ModelBinderFactory Microsoft.AspNetCore.Mvc.ControllerBase.Url Microsoft.AspNetCore.Mvc.ControllerBase.ObjectValidator Microsoft.AspNetCore.Mvc.ControllerBase.ProblemDetailsFactory Microsoft.AspNetCore.Mvc.ControllerBase.User System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Controllers Assembly : AuthEndpoints.dll Syntax [Route(\"jwt/\")] [ApiController] public class JwtController<TUserKey, TUser> : ControllerBase where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey> Type Parameters Name Description TUserKey TUser Constructors | Improve this Doc View Source JwtController(UserManager<TUser>, IAuthenticator<TUser>, IJwtValidator, IOptions<AuthEndpointsOptions>) Declaration public JwtController(UserManager<TUser> userManager, IAuthenticator<TUser> authenticator, IJwtValidator jwtValidator, IOptions<AuthEndpointsOptions> options) Parameters Type Name Description Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IAuthenticator <TUser> authenticator IJwtValidator jwtValidator Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options Fields | Improve this Doc View Source authenticator Declaration protected readonly IAuthenticator<TUser> authenticator Field Value Type Description IAuthenticator <TUser> | Improve this Doc View Source jwtValidator Declaration protected readonly IJwtValidator jwtValidator Field Value Type Description IJwtValidator | Improve this Doc View Source options Declaration protected readonly IOptions<AuthEndpointsOptions> options Field Value Type Description Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > | Improve this Doc View Source userManager Declaration protected readonly UserManager<TUser> userManager Field Value Type Description Microsoft.AspNetCore.Identity.UserManager <TUser> Methods | Improve this Doc View Source Create(LoginRequest) Use this endpoint to obtain jwt Declaration [HttpPost(\"create\")] public virtual async Task<IActionResult> Create([FromBody] LoginRequest request) Parameters Type Name Description LoginRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > Remarks Use this endpoint to obtain jwt | Improve this Doc View Source Refresh(RefreshRequest) Use this endpoint to refresh jwt Declaration [HttpPost(\"refresh\")] public virtual async Task<IActionResult> Refresh([FromBody] RefreshRequest request) Parameters Type Name Description RefreshRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source Verify() Use this endpoint to verify access jwt Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpGet(\"verify\")] public virtual IActionResult Verify() Returns Type Description Microsoft.AspNetCore.Mvc.IActionResult"
  },
  "api/AuthEndpoints.Controllers.TwoStepVerificationController-2.html": {
    "href": "api/AuthEndpoints.Controllers.TwoStepVerificationController-2.html",
    "title": "Class TwoStepVerificationController<TUserKey, TUser> | AuthEndpoints",
    "keywords": "Class TwoStepVerificationController<TUserKey, TUser> Inherit this base class to define endpoints that contain 2fa process actions such as enable 2fa and login. Inheritance System.Object Microsoft.AspNetCore.Mvc.ControllerBase TwoStepVerificationController<TUserKey, TUser> Inherited Members Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32) Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, System.String, System.Text.Encoding) Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.NoContent() Microsoft.AspNetCore.Mvc.ControllerBase.Ok() Microsoft.AspNetCore.Mvc.ControllerBase.Ok(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Redirect(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanentPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirect(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanentPreserveMethod(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction() Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanentPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePreserveMethod(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanentPreserveMethod(System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanentPreserveMethod(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue) Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, System.Boolean) Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized() Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.NotFound() Microsoft.AspNetCore.Mvc.ControllerBase.NotFound(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest() Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity() Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Conflict() Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Problem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ValidationProblemDetails) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem() Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.Uri, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted() Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge() Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid() Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut() Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, System.Linq.Expressions.Expression<System.Func<TModel, System.Object>>[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Linq.Expressions.Expression<System.Func<TModel, System.Object>>[]) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object, System.Type, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object, System.Type, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Boolean>) Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object) Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object, System.String) Microsoft.AspNetCore.Mvc.ControllerBase.HttpContext Microsoft.AspNetCore.Mvc.ControllerBase.Request Microsoft.AspNetCore.Mvc.ControllerBase.Response Microsoft.AspNetCore.Mvc.ControllerBase.RouteData Microsoft.AspNetCore.Mvc.ControllerBase.ModelState Microsoft.AspNetCore.Mvc.ControllerBase.ControllerContext Microsoft.AspNetCore.Mvc.ControllerBase.MetadataProvider Microsoft.AspNetCore.Mvc.ControllerBase.ModelBinderFactory Microsoft.AspNetCore.Mvc.ControllerBase.Url Microsoft.AspNetCore.Mvc.ControllerBase.ObjectValidator Microsoft.AspNetCore.Mvc.ControllerBase.ProblemDetailsFactory Microsoft.AspNetCore.Mvc.ControllerBase.User System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Controllers Assembly : AuthEndpoints.dll Syntax [ApiController] [Route(\"users/\")] public class TwoStepVerificationController<TUserKey, TUser> : ControllerBase where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey> Type Parameters Name Description TUserKey TUser Constructors | Improve this Doc View Source TwoStepVerificationController(UserManager<TUser>, IAuthenticator<TUser>, IEmailSender, IEmailFactory) Declaration public TwoStepVerificationController(UserManager<TUser> userManager, IAuthenticator<TUser> authenticator, IEmailSender emailSender, IEmailFactory emailFactory) Parameters Type Name Description Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IAuthenticator <TUser> authenticator IEmailSender emailSender IEmailFactory emailFactory Fields | Improve this Doc View Source authenticator Declaration protected readonly IAuthenticator<TUser> authenticator Field Value Type Description IAuthenticator <TUser> | Improve this Doc View Source emailFactory Declaration protected readonly IEmailFactory emailFactory Field Value Type Description IEmailFactory | Improve this Doc View Source emailSender Declaration protected readonly IEmailSender emailSender Field Value Type Description IEmailSender | Improve this Doc View Source userManager Declaration protected readonly UserManager<TUser> userManager Field Value Type Description Microsoft.AspNetCore.Identity.UserManager <TUser> Methods | Improve this Doc View Source EnableTwoStepVerification() Use this endpoint to send email to user with 2fa token Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpGet(\"enable_2fa\")] public virtual async Task<IActionResult> EnableTwoStepVerification() Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source EnableTwoStepVerificationConfirm(TwoStepVerificationConfirmRequest) Use this endpoint to finish enable 2fa process. Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpPost(\"enable_2fa_confirm\")] public virtual async Task<IActionResult> EnableTwoStepVerificationConfirm([FromBody] TwoStepVerificationConfirmRequest request) Parameters Type Name Description TwoStepVerificationConfirmRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source TwoStepVerificationConfirm(TwoStepVerificationConfirmRequest) Use this endpoint to finish two step verification login process. Declaration [HttpPost(\"two_step_verification_confirm\")] public virtual async Task<IActionResult> TwoStepVerificationConfirm([FromBody] TwoStepVerificationConfirmRequest request) Parameters Type Name Description TwoStepVerificationConfirmRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult > | Improve this Doc View Source TwoStepVerificationLogin(TwoStepVerificationLoginRequest) Use this endpoint to login with 2fa process Declaration [HttpPost(\"two_step_verification_login\")] public virtual async Task<IActionResult> TwoStepVerificationLogin([FromBody] TwoStepVerificationLoginRequest request) Parameters Type Name Description TwoStepVerificationLoginRequest request Returns Type Description Task < Microsoft.AspNetCore.Mvc.IActionResult >"
  },
  "api/AuthEndpoints.EmailOptions.html": {
    "href": "api/AuthEndpoints.EmailOptions.html",
    "title": "Class EmailOptions | AuthEndpoints",
    "keywords": "Class EmailOptions Represents all the options you can use to configure the Email backend Inheritance System.Object EmailOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints Assembly : AuthEndpoints.Core.dll Syntax public class EmailOptions Properties | Improve this Doc View Source From Declaration public string From { get; set; } Property Value Type Description System.String | Improve this Doc View Source Host Declaration public string Host { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Port Declaration public int Port { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source User Declaration public string User { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.html": {
    "href": "api/AuthEndpoints.html",
    "title": "Namespace AuthEndpoints | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints Classes AuthEndpointsBuilder Helper functions for configuring AuthEndpoints services. AuthEndpointsOptions Represents all the options you can use to configure the AuthEndpoints system. EmailOptions Represents all the options you can use to configure the Email backend JwtSigningOptions Signing options for Jwt OptionsConfigurator OptionsValidator ServiceCollectionExtensions Provides extensions to easily bootstrap authendpoints"
  },
  "api/AuthEndpoints.JwtSigningOptions.html": {
    "href": "api/AuthEndpoints.JwtSigningOptions.html",
    "title": "Class JwtSigningOptions | AuthEndpoints",
    "keywords": "Class JwtSigningOptions Signing options for Jwt Inheritance System.Object JwtSigningOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints Assembly : AuthEndpoints.Core.dll Syntax public class JwtSigningOptions Properties | Improve this Doc View Source Algorithm To use symmetric HMAC signing and verification, the following algorithms may be used: 'HS256', 'HS384', 'HS512'. When an HMAC algorithm is chosen, the SigningKey setting will be used as both the signing key and the verifying key. To use asymmetric RSA signing and verification, the following algorithms may be used: 'RS256', 'RS384', 'RS512'. When an RSA algorithm is chosen, the SigningKey setting must be set to an RsaSecurityKey that contains an RSA private key. Likewise, the TokenValidationParammeters setting must be set to an RsaSecurityKey that contains an RSA public key. Declaration public string Algorithm { get; set; } Property Value Type Description System.String | Improve this Doc View Source ExpirationMinutes Declaration public int ExpirationMinutes { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SigningKey The signing key that is used to sign the content of generated tokens. Declaration public SecurityKey SigningKey { get; set; } Property Value Type Description Microsoft.IdentityModel.Tokens.SecurityKey"
  },
  "api/AuthEndpoints.MinimalApi.AuthEndpointsBuilderExtensions.html": {
    "href": "api/AuthEndpoints.MinimalApi.AuthEndpointsBuilderExtensions.html",
    "title": "Class AuthEndpointsBuilderExtensions | AuthEndpoints",
    "keywords": "Class AuthEndpointsBuilderExtensions Inheritance System.Object AuthEndpointsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public static class AuthEndpointsBuilderExtensions Methods | Improve this Doc View Source Add2FAEndpoints(AuthEndpointsBuilder) Declaration public static AuthEndpointsBuilder Add2FAEndpoints(this AuthEndpointsBuilder builder) Parameters Type Name Description AuthEndpointsBuilder builder Returns Type Description AuthEndpointsBuilder | Improve this Doc View Source AddAllEndpointDefinitions(AuthEndpointsBuilder) Declaration public static AuthEndpointsBuilder AddAllEndpointDefinitions(this AuthEndpointsBuilder builder) Parameters Type Name Description AuthEndpointsBuilder builder Returns Type Description AuthEndpointsBuilder | Improve this Doc View Source AddBasicAuthenticationEndpoints(AuthEndpointsBuilder) Declaration public static AuthEndpointsBuilder AddBasicAuthenticationEndpoints(this AuthEndpointsBuilder builder) Parameters Type Name Description AuthEndpointsBuilder builder Returns Type Description AuthEndpointsBuilder | Improve this Doc View Source AddEndpointDefinition(AuthEndpointsBuilder, Type) Declaration public static AuthEndpointsBuilder AddEndpointDefinition(this AuthEndpointsBuilder builder, Type definitionType) Parameters Type Name Description AuthEndpointsBuilder builder Type definitionType Returns Type Description AuthEndpointsBuilder | Improve this Doc View Source AddEndpointDefinition<TEndpointDefinition>(AuthEndpointsBuilder) Declaration public static AuthEndpointsBuilder AddEndpointDefinition<TEndpointDefinition>(this AuthEndpointsBuilder builder) where TEndpointDefinition : IEndpointDefinition Parameters Type Name Description AuthEndpointsBuilder builder Returns Type Description AuthEndpointsBuilder Type Parameters Name Description TEndpointDefinition | Improve this Doc View Source AddJwtEndpoints(AuthEndpointsBuilder) Declaration public static AuthEndpointsBuilder AddJwtEndpoints(this AuthEndpointsBuilder builder) Parameters Type Name Description AuthEndpointsBuilder builder Returns Type Description AuthEndpointsBuilder"
  },
  "api/AuthEndpoints.MinimalApi.BasicAuthEndpointDefinition-2.html": {
    "href": "api/AuthEndpoints.MinimalApi.BasicAuthEndpointDefinition-2.html",
    "title": "Class BasicAuthEndpointDefinition<TKey, TUser> | AuthEndpoints",
    "keywords": "Class BasicAuthEndpointDefinition<TKey, TUser> Inheritance System.Object BasicAuthEndpointDefinition<TKey, TUser> Implements IEndpointDefinition IBasicAuthEndpointDefinition <TKey, TUser> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class BasicAuthEndpointDefinition<TKey, TUser> : IEndpointDefinition, IBasicAuthEndpointDefinition<TKey, TUser> where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source Delete(HttpContext, UserManager<TUser>) Use this endpoint to delete authenticated user. Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpDelete(\"delete\")] public virtual async Task<IResult> Delete(HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source EmailVerification(HttpContext, UserManager<TUser>, IOptions<AuthEndpointsOptions>, IEmailFactory, IEmailSender) Use this endpoints to send email verification link via email You should provide site in your frontend application (configured by EmailConfirmationUrl ) which will send POST request to verify email confirmation endpoint. Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpGet(\"verify_email\")] public virtual async Task<IResult> EmailVerification(HttpContext context, UserManager<TUser> userManager, IOptions<AuthEndpointsOptions> opt, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > opt IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source EmailVerificationConfirm(ConfirmEmailRequest, UserManager<TUser>) Use this endpoint to confirm user email. Declaration [HttpPost(\"verify_email_confirm\")] public virtual async Task<IResult> EmailVerificationConfirm([FromBody] ConfirmEmailRequest request, UserManager<TUser> userManager) Parameters Type Name Description ConfirmEmailRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source GetMe(HttpContext, UserManager<TUser>) Use this endpoint to retrieve the authenticated user Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpGet(\"me\")] public virtual async Task<IResult> GetMe(HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app | Improve this Doc View Source Register(RegisterRequest, UserManager<TUser>, IdentityErrorDescriber) Use this endpoint to register a new user Declaration public virtual async Task<IResult> Register([FromBody] RegisterRequest request, UserManager<TUser> userManager, IdentityErrorDescriber errorDescriber) Parameters Type Name Description RegisterRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.AspNetCore.Identity.IdentityErrorDescriber errorDescriber Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source ResetPassword(ResetPasswordRequest, UserManager<TUser>, IOptions<AuthEndpointsOptions>, IEmailFactory, IEmailSender) Use this endpoint to send email to user with password reset link. You should provide site in your frontend application (configured by PasswordResetUrl ) which will send POST request to reset password confirmation endpoint. Declaration [HttpPost(\"reset_password\")] public virtual async Task<IResult> ResetPassword([FromBody] ResetPasswordRequest request, UserManager<TUser> userManager, IOptions<AuthEndpointsOptions> opt, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description ResetPasswordRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > opt IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source ResetPasswordConfirm(ResetPasswordConfirmRequest, UserManager<TUser>) Use this endpoint to finish reset password process. Declaration [HttpPost(\"reset_password_confirm\")] public virtual async Task<IResult> ResetPasswordConfirm([FromBody] ResetPasswordConfirmRequest request, UserManager<TUser> userManager) Parameters Type Name Description ResetPasswordConfirmRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source SetPassword(SetPasswordRequest, HttpContext, UserManager<TUser>) Use this endpoint to change user password Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpPost(\"set_password\")] public virtual async Task<IResult> SetPassword([FromBody] SetPasswordRequest request, HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description SetPasswordRequest request Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source SetUsername(SetUsernameRequest, HttpContext, UserManager<TUser>) Use this endpoint to change user's username Declaration [Authorize(AuthenticationSchemes = \"jwt\")] [HttpPost(\"set_username\")] public virtual async Task<IResult> SetUsername([FromBody] SetUsernameRequest request, HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description SetUsernameRequest request Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Implements IEndpointDefinition IBasicAuthEndpointDefinition<TKey, TUser>"
  },
  "api/AuthEndpoints.MinimalApi.html": {
    "href": "api/AuthEndpoints.MinimalApi.html",
    "title": "Namespace AuthEndpoints.MinimalApi | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.MinimalApi Classes AuthEndpointsBuilderExtensions BasicAuthEndpointDefinition<TKey, TUser> JwtEndpointDefinition<TKey, TUser> MinimalValidator TwoFactorEndpointDefinition<TKey, TUser> ValidationResult WebApplicationExtensions Interfaces IBasicAuthEndpointDefinition<TKey, TUser> IEndpointDefinition IJwtEndpointDefinition<TKey, TUser> IMinimalValidator"
  },
  "api/AuthEndpoints.MinimalApi.IBasicAuthEndpointDefinition-2.html": {
    "href": "api/AuthEndpoints.MinimalApi.IBasicAuthEndpointDefinition-2.html",
    "title": "Interface IBasicAuthEndpointDefinition<TKey, TUser> | AuthEndpoints",
    "keywords": "Interface IBasicAuthEndpointDefinition<TKey, TUser> Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public interface IBasicAuthEndpointDefinition<TKey, TUser> where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source Delete(HttpContext, UserManager<TUser>) Declaration Task<IResult> Delete(HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source EmailVerification(HttpContext, UserManager<TUser>, IOptions<AuthEndpointsOptions>, IEmailFactory, IEmailSender) Declaration Task<IResult> EmailVerification(HttpContext context, UserManager<TUser> userManager, IOptions<AuthEndpointsOptions> opt, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > opt IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source EmailVerificationConfirm(ConfirmEmailRequest, UserManager<TUser>) Declaration Task<IResult> EmailVerificationConfirm([FromBody] ConfirmEmailRequest request, UserManager<TUser> userManager) Parameters Type Name Description ConfirmEmailRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source GetMe(HttpContext, UserManager<TUser>) Declaration Task<IResult> GetMe(HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source Register(RegisterRequest, UserManager<TUser>, IdentityErrorDescriber) Declaration Task<IResult> Register([FromBody] RegisterRequest request, UserManager<TUser> userManager, IdentityErrorDescriber errorDescriber) Parameters Type Name Description RegisterRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.AspNetCore.Identity.IdentityErrorDescriber errorDescriber Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source ResetPassword(ResetPasswordRequest, UserManager<TUser>, IOptions<AuthEndpointsOptions>, IEmailFactory, IEmailSender) Declaration Task<IResult> ResetPassword([FromBody] ResetPasswordRequest request, UserManager<TUser> userManager, IOptions<AuthEndpointsOptions> opt, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description ResetPasswordRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > opt IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source ResetPasswordConfirm(ResetPasswordConfirmRequest, UserManager<TUser>) Declaration Task<IResult> ResetPasswordConfirm([FromBody] ResetPasswordConfirmRequest request, UserManager<TUser> userManager) Parameters Type Name Description ResetPasswordConfirmRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source SetPassword(SetPasswordRequest, HttpContext, UserManager<TUser>) Declaration Task<IResult> SetPassword([FromBody] SetPasswordRequest request, HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description SetPasswordRequest request Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source SetUsername(SetUsernameRequest, HttpContext, UserManager<TUser>) Declaration Task<IResult> SetUsername([FromBody] SetUsernameRequest request, HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description SetUsernameRequest request Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult >"
  },
  "api/AuthEndpoints.MinimalApi.IEndpointDefinition.html": {
    "href": "api/AuthEndpoints.MinimalApi.IEndpointDefinition.html",
    "title": "Interface IEndpointDefinition | AuthEndpoints",
    "keywords": "Interface IEndpointDefinition Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public interface IEndpointDefinition Methods | Improve this Doc View Source MapEndpoints(WebApplication) Declaration void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app"
  },
  "api/AuthEndpoints.MinimalApi.IJwtEndpointDefinition-2.html": {
    "href": "api/AuthEndpoints.MinimalApi.IJwtEndpointDefinition-2.html",
    "title": "Interface IJwtEndpointDefinition<TKey, TUser> | AuthEndpoints",
    "keywords": "Interface IJwtEndpointDefinition<TKey, TUser> Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public interface IJwtEndpointDefinition<TKey, TUser> where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source Create(LoginRequest, IAuthenticator<TUser>, UserManager<TUser>) Declaration Task<IResult> Create([FromBody] LoginRequest request, IAuthenticator<TUser> authenticator, UserManager<TUser> userManager) Parameters Type Name Description LoginRequest request IAuthenticator <TUser> authenticator Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source Refresh(RefreshRequest, IJwtValidator, IOptions<AuthEndpointsOptions>, UserManager<TUser>, IAuthenticator<TUser>) Declaration Task<IResult> Refresh([FromBody] RefreshRequest request, IJwtValidator jwtValidator, IOptions<AuthEndpointsOptions> options, UserManager<TUser> userManager, IAuthenticator<TUser> authenticator) Parameters Type Name Description RefreshRequest request IJwtValidator jwtValidator Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IAuthenticator <TUser> authenticator Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source Verify() Declaration IResult Verify() Returns Type Description Microsoft.AspNetCore.Http.IResult"
  },
  "api/AuthEndpoints.MinimalApi.IMinimalValidator.html": {
    "href": "api/AuthEndpoints.MinimalApi.IMinimalValidator.html",
    "title": "Interface IMinimalValidator | AuthEndpoints",
    "keywords": "Interface IMinimalValidator Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public interface IMinimalValidator Methods | Improve this Doc View Source Validate<T>(T) Declaration ValidationResult Validate<T>(T model) Parameters Type Name Description T model Returns Type Description ValidationResult Type Parameters Name Description T"
  },
  "api/AuthEndpoints.MinimalApi.JwtEndpointDefinition-2.html": {
    "href": "api/AuthEndpoints.MinimalApi.JwtEndpointDefinition-2.html",
    "title": "Class JwtEndpointDefinition<TKey, TUser> | AuthEndpoints",
    "keywords": "Class JwtEndpointDefinition<TKey, TUser> Inheritance System.Object JwtEndpointDefinition<TKey, TUser> Implements IEndpointDefinition IJwtEndpointDefinition <TKey, TUser> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class JwtEndpointDefinition<TKey, TUser> : IEndpointDefinition, IJwtEndpointDefinition<TKey, TUser> where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source Create(LoginRequest, IAuthenticator<TUser>, UserManager<TUser>) Use this endpoint to obtain jwt Declaration public virtual async Task<IResult> Create([FromBody] LoginRequest request, IAuthenticator<TUser> authenticator, UserManager<TUser> userManager) Parameters Type Name Description LoginRequest request IAuthenticator <TUser> authenticator Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Remarks Use this endpoint to obtain jwt | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app | Improve this Doc View Source Refresh(RefreshRequest, IJwtValidator, IOptions<AuthEndpointsOptions>, UserManager<TUser>, IAuthenticator<TUser>) Use this endpoint to refresh jwt Declaration public virtual async Task<IResult> Refresh([FromBody] RefreshRequest request, IJwtValidator jwtValidator, IOptions<AuthEndpointsOptions> options, UserManager<TUser> userManager, IAuthenticator<TUser> authenticator) Parameters Type Name Description RefreshRequest request IJwtValidator jwtValidator Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IAuthenticator <TUser> authenticator Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source Verify() Use this endpoint to verify access jwt Declaration [Authorize(AuthenticationSchemes = \"jwt\")] public virtual IResult Verify() Returns Type Description Microsoft.AspNetCore.Http.IResult Implements IEndpointDefinition IJwtEndpointDefinition<TKey, TUser>"
  },
  "api/AuthEndpoints.MinimalApi.MinimalValidator.html": {
    "href": "api/AuthEndpoints.MinimalApi.MinimalValidator.html",
    "title": "Class MinimalValidator | AuthEndpoints",
    "keywords": "Class MinimalValidator Inheritance System.Object MinimalValidator Implements IMinimalValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class MinimalValidator : IMinimalValidator Methods | Improve this Doc View Source Validate<T>(T) Declaration public ValidationResult Validate<T>(T model) Parameters Type Name Description T model Returns Type Description ValidationResult Type Parameters Name Description T Implements IMinimalValidator"
  },
  "api/AuthEndpoints.MinimalApi.TwoFactorEndpointDefinition-2.html": {
    "href": "api/AuthEndpoints.MinimalApi.TwoFactorEndpointDefinition-2.html",
    "title": "Class TwoFactorEndpointDefinition<TKey, TUser> | AuthEndpoints",
    "keywords": "Class TwoFactorEndpointDefinition<TKey, TUser> Inheritance System.Object TwoFactorEndpointDefinition<TKey, TUser> Implements IEndpointDefinition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class TwoFactorEndpointDefinition<TKey, TUser> : IEndpointDefinition where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new() Type Parameters Name Description TKey TUser Methods | Improve this Doc View Source EnableTwoStepVerification(HttpContext, UserManager<TUser>, IEmailFactory, IEmailSender) Use this endpoint to send email to user with 2fa token Declaration [Authorize(AuthenticationSchemes = \"jwt\")] public virtual async Task<IResult> EnableTwoStepVerification(HttpContext context, UserManager<TUser> userManager, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source EnableTwoStepVerificationConfirm(TwoStepVerificationConfirmRequest, HttpContext, UserManager<TUser>) Use this endpoint to finish enable 2fa process. Declaration [Authorize(AuthenticationSchemes = \"jwt\")] public virtual async Task<IResult> EnableTwoStepVerificationConfirm([FromBody] TwoStepVerificationConfirmRequest request, HttpContext context, UserManager<TUser> userManager) Parameters Type Name Description TwoStepVerificationConfirmRequest request Microsoft.AspNetCore.Http.HttpContext context Microsoft.AspNetCore.Identity.UserManager <TUser> userManager Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source MapEndpoints(WebApplication) Declaration public void MapEndpoints(WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app | Improve this Doc View Source TwoStepVerificationConfirm(TwoStepVerificationConfirmRequest, UserManager<TUser>, IAuthenticator<TUser>) Use this endpoint to finish two step verification login process. Declaration [HttpPost(\"two_step_verification_confirm\")] public virtual async Task<IResult> TwoStepVerificationConfirm([FromBody] TwoStepVerificationConfirmRequest request, UserManager<TUser> userManager, IAuthenticator<TUser> authenticator) Parameters Type Name Description TwoStepVerificationConfirmRequest request Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IAuthenticator <TUser> authenticator Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > | Improve this Doc View Source TwoStepVerificationLogin(TwoStepVerificationLoginRequest, IAuthenticator<TUser>, UserManager<TUser>, IEmailFactory, IEmailSender) Use this endpoint to login with 2fa process Declaration [HttpPost(\"two_step_verification_login\")] public virtual async Task<IResult> TwoStepVerificationLogin([FromBody] TwoStepVerificationLoginRequest request, IAuthenticator<TUser> authenticator, UserManager<TUser> userManager, IEmailFactory emailFactory, IEmailSender emailSender) Parameters Type Name Description TwoStepVerificationLoginRequest request IAuthenticator <TUser> authenticator Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IEmailFactory emailFactory IEmailSender emailSender Returns Type Description Task < Microsoft.AspNetCore.Http.IResult > Implements IEndpointDefinition"
  },
  "api/AuthEndpoints.MinimalApi.ValidationResult.html": {
    "href": "api/AuthEndpoints.MinimalApi.ValidationResult.html",
    "title": "Class ValidationResult | AuthEndpoints",
    "keywords": "Class ValidationResult Inheritance System.Object ValidationResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public class ValidationResult Properties | Improve this Doc View Source Errors Declaration public IList<string> Errors { get; set; } Property Value Type Description IList < System.String > | Improve this Doc View Source IsValid Declaration public bool IsValid { get; set; } Property Value Type Description System.Boolean"
  },
  "api/AuthEndpoints.MinimalApi.WebApplicationExtensions.html": {
    "href": "api/AuthEndpoints.MinimalApi.WebApplicationExtensions.html",
    "title": "Class WebApplicationExtensions | AuthEndpoints",
    "keywords": "Class WebApplicationExtensions Inheritance System.Object WebApplicationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.MinimalApi Assembly : AuthEndpoints.MinimalApi.dll Syntax public static class WebApplicationExtensions Methods | Improve this Doc View Source MapAuthEndpoints(WebApplication) Declaration public static void MapAuthEndpoints(this WebApplication app) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication app"
  },
  "api/AuthEndpoints.Models.AuthenticatedUserResponse.html": {
    "href": "api/AuthEndpoints.Models.AuthenticatedUserResponse.html",
    "title": "Class AuthenticatedUserResponse | AuthEndpoints",
    "keywords": "Class AuthenticatedUserResponse the dto used to send an authenticated user response containing access Token and refresh Token Inheritance System.Object AuthenticatedUserResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class AuthenticatedUserResponse Properties | Improve this Doc View Source AccessToken Declaration public string AccessToken { get; set; } Property Value Type Description System.String | Improve this Doc View Source RefreshToken Declaration public string RefreshToken { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.ConfirmEmailRequest.html": {
    "href": "api/AuthEndpoints.Models.ConfirmEmailRequest.html",
    "title": "Class ConfirmEmailRequest | AuthEndpoints",
    "keywords": "Class ConfirmEmailRequest The dto used for email confirmation request Inheritance System.Object ConfirmEmailRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class ConfirmEmailRequest Properties | Improve this Doc View Source Identity Declaration [Required] public string Identity { get; set; } Property Value Type Description System.String | Improve this Doc View Source Token Declaration [Required] public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.EmailData.html": {
    "href": "api/AuthEndpoints.Models.EmailData.html",
    "title": "Class EmailData | AuthEndpoints",
    "keywords": "Class EmailData The dto used for creating an MimeMessage object by IEmailFactory Inheritance System.Object EmailData Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class EmailData Constructors | Improve this Doc View Source EmailData(IEnumerable<String>, String, String) Declaration public EmailData(IEnumerable<string> to, string subject, string link) Parameters Type Name Description IEnumerable < System.String > to System.String subject System.String link Properties | Improve this Doc View Source Link Declaration public string Link { get; set; } Property Value Type Description System.String | Improve this Doc View Source Subject Declaration public string Subject { get; set; } Property Value Type Description System.String | Improve this Doc View Source To Declaration public List<MailboxAddress> To { get; set; } Property Value Type Description List < MimeKit.MailboxAddress >"
  },
  "api/AuthEndpoints.Models.ErrorResponse.html": {
    "href": "api/AuthEndpoints.Models.ErrorResponse.html",
    "title": "Class ErrorResponse | AuthEndpoints",
    "keywords": "Class ErrorResponse The dto used to send an error response to the client Inheritance System.Object ErrorResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class ErrorResponse Constructors | Improve this Doc View Source ErrorResponse(IEnumerable<String>) instantiate a new error response with the given list of error messages Declaration public ErrorResponse(IEnumerable<string> errors) Parameters Type Name Description IEnumerable < System.String > errors | Improve this Doc View Source ErrorResponse(String) instantiate a new error response with the given error message Declaration public ErrorResponse(string errorMessage) Parameters Type Name Description System.String errorMessage Properties | Improve this Doc View Source Errors Declaration public IEnumerable<string> Errors { get; set; } Property Value Type Description IEnumerable < System.String >"
  },
  "api/AuthEndpoints.Models.html": {
    "href": "api/AuthEndpoints.Models.html",
    "title": "Namespace AuthEndpoints.Models | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.Models Classes AuthenticatedUserResponse the dto used to send an authenticated user response containing access Token and refresh Token ConfirmEmailRequest The dto used for email confirmation request EmailData The dto used for creating an MimeMessage object by IEmailFactory ErrorResponse The dto used to send an error response to the client LoginRequest The dto used for login request RefreshRequest the dto used for refresh request RegisterRequest the dto used for registration request ResetPasswordConfirmRequest The dto used for reset password confirmation request ResetPasswordRequest The dto used for reset password request SetPasswordRequest the dto used for set password request SetUsernameRequest the dto used for set username request TwoStepVerificationConfirmRequest TwoStepVerificationLoginRequest VerifyRequest the dto used for verify request"
  },
  "api/AuthEndpoints.Models.LoginRequest.html": {
    "href": "api/AuthEndpoints.Models.LoginRequest.html",
    "title": "Class LoginRequest | AuthEndpoints",
    "keywords": "Class LoginRequest The dto used for login request Inheritance System.Object LoginRequest TwoStepVerificationLoginRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class LoginRequest Constructors | Improve this Doc View Source LoginRequest(String, String) Declaration public LoginRequest(string username, string password) Parameters Type Name Description System.String username System.String password Properties | Improve this Doc View Source Password Declaration [Required] public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Username Declaration [Required] public string Username { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.RefreshRequest.html": {
    "href": "api/AuthEndpoints.Models.RefreshRequest.html",
    "title": "Class RefreshRequest | AuthEndpoints",
    "keywords": "Class RefreshRequest the dto used for refresh request Inheritance System.Object RefreshRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class RefreshRequest Constructors | Improve this Doc View Source RefreshRequest(String) Declaration public RefreshRequest(string refreshToken) Parameters Type Name Description System.String refreshToken Properties | Improve this Doc View Source RefreshToken Declaration [Required] public string RefreshToken { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.RegisterRequest.html": {
    "href": "api/AuthEndpoints.Models.RegisterRequest.html",
    "title": "Class RegisterRequest | AuthEndpoints",
    "keywords": "Class RegisterRequest the dto used for registration request Inheritance System.Object RegisterRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class RegisterRequest Constructors | Improve this Doc View Source RegisterRequest(String, String, String, String) Declaration public RegisterRequest(string email, string username, string password, string confirmPassword) Parameters Type Name Description System.String email System.String username System.String password System.String confirmPassword Properties | Improve this Doc View Source ConfirmPassword Declaration [Required] public string ConfirmPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source Email Declaration [Required] [EmailAddress] public string Email { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Declaration [Required] public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Username Declaration [Required] public string Username { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.ResetPasswordConfirmRequest.html": {
    "href": "api/AuthEndpoints.Models.ResetPasswordConfirmRequest.html",
    "title": "Class ResetPasswordConfirmRequest | AuthEndpoints",
    "keywords": "Class ResetPasswordConfirmRequest The dto used for reset password confirmation request Inheritance System.Object ResetPasswordConfirmRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class ResetPasswordConfirmRequest Properties | Improve this Doc View Source ConfirmNewPassword Declaration [Required] public string ConfirmNewPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source Identity Declaration [Required] public string Identity { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewPassword Declaration [Required] public string NewPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source Token Declaration [Required] public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.ResetPasswordRequest.html": {
    "href": "api/AuthEndpoints.Models.ResetPasswordRequest.html",
    "title": "Class ResetPasswordRequest | AuthEndpoints",
    "keywords": "Class ResetPasswordRequest The dto used for reset password request Inheritance System.Object ResetPasswordRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class ResetPasswordRequest Properties | Improve this Doc View Source Email Declaration [Required] [EmailAddress] public string Email { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.SetPasswordRequest.html": {
    "href": "api/AuthEndpoints.Models.SetPasswordRequest.html",
    "title": "Class SetPasswordRequest | AuthEndpoints",
    "keywords": "Class SetPasswordRequest the dto used for set password request Inheritance System.Object SetPasswordRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class SetPasswordRequest Properties | Improve this Doc View Source ConfirmNewPassword Declaration [Required] public string ConfirmNewPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source CurrentPassword Declaration [Required] public string CurrentPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewPassword Declaration [Required] public string NewPassword { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.SetUsernameRequest.html": {
    "href": "api/AuthEndpoints.Models.SetUsernameRequest.html",
    "title": "Class SetUsernameRequest | AuthEndpoints",
    "keywords": "Class SetUsernameRequest the dto used for set username request Inheritance System.Object SetUsernameRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class SetUsernameRequest Properties | Improve this Doc View Source CurrentPassword Declaration public string CurrentPassword { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewUsername Declaration public string NewUsername { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.TwoStepVerificationConfirmRequest.html": {
    "href": "api/AuthEndpoints.Models.TwoStepVerificationConfirmRequest.html",
    "title": "Class TwoStepVerificationConfirmRequest | AuthEndpoints",
    "keywords": "Class TwoStepVerificationConfirmRequest Inheritance System.Object TwoStepVerificationConfirmRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class TwoStepVerificationConfirmRequest Properties | Improve this Doc View Source Email Declaration [Required] public string Email { get; set; } Property Value Type Description System.String | Improve this Doc View Source Provider Declaration [Required] public string Provider { get; set; } Property Value Type Description System.String | Improve this Doc View Source Token Declaration [Required] public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.TwoStepVerificationLoginRequest.html": {
    "href": "api/AuthEndpoints.Models.TwoStepVerificationLoginRequest.html",
    "title": "Class TwoStepVerificationLoginRequest | AuthEndpoints",
    "keywords": "Class TwoStepVerificationLoginRequest Inheritance System.Object LoginRequest TwoStepVerificationLoginRequest Inherited Members LoginRequest.Username LoginRequest.Password System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class TwoStepVerificationLoginRequest : LoginRequest Constructors | Improve this Doc View Source TwoStepVerificationLoginRequest(String, String) Declaration public TwoStepVerificationLoginRequest(string username, string password) Parameters Type Name Description System.String username System.String password Properties | Improve this Doc View Source Provider Declaration [Required] public string Provider { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.Models.VerifyRequest.html": {
    "href": "api/AuthEndpoints.Models.VerifyRequest.html",
    "title": "Class VerifyRequest | AuthEndpoints",
    "keywords": "Class VerifyRequest the dto used for verify request Inheritance System.Object VerifyRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Models Assembly : AuthEndpoints.Core.dll Syntax public class VerifyRequest Properties | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/AuthEndpoints.OptionsConfigurator.html": {
    "href": "api/AuthEndpoints.OptionsConfigurator.html",
    "title": "Class OptionsConfigurator | AuthEndpoints",
    "keywords": "Class OptionsConfigurator Inheritance System.Object OptionsConfigurator Implements Microsoft.Extensions.Options.IPostConfigureOptions < AuthEndpointsOptions > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints Assembly : AuthEndpoints.Core.dll Syntax public class OptionsConfigurator : IPostConfigureOptions<AuthEndpointsOptions> Methods | Improve this Doc View Source PostConfigure(String, AuthEndpointsOptions) Declaration public void PostConfigure(string name, AuthEndpointsOptions options) Parameters Type Name Description System.String name AuthEndpointsOptions options Implements Microsoft.Extensions.Options.IPostConfigureOptions<TOptions>"
  },
  "api/AuthEndpoints.OptionsValidator.html": {
    "href": "api/AuthEndpoints.OptionsValidator.html",
    "title": "Class OptionsValidator | AuthEndpoints",
    "keywords": "Class OptionsValidator Inheritance System.Object OptionsValidator Implements Microsoft.Extensions.Options.IValidateOptions < AuthEndpointsOptions > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints Assembly : AuthEndpoints.Core.dll Syntax public class OptionsValidator : IValidateOptions<AuthEndpointsOptions> Constructors | Improve this Doc View Source OptionsValidator(ILogger<OptionsValidator>) Declaration public OptionsValidator(ILogger<OptionsValidator> logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger < OptionsValidator > logger Methods | Improve this Doc View Source Validate(String, AuthEndpointsOptions) Declaration public ValidateOptionsResult Validate(string name, AuthEndpointsOptions options) Parameters Type Name Description System.String name AuthEndpointsOptions options Returns Type Description Microsoft.Extensions.Options.ValidateOptionsResult Implements Microsoft.Extensions.Options.IValidateOptions<TOptions>"
  },
  "api/AuthEndpoints.ServiceCollectionExtensions.html": {
    "href": "api/AuthEndpoints.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | AuthEndpoints",
    "keywords": "Class ServiceCollectionExtensions Provides extensions to easily bootstrap authendpoints Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints Assembly : AuthEndpoints.Core.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddAuthEndpoints<TUserKey, TUser>(IServiceCollection) Adds the AuthEndpoints core services Declaration public static AuthEndpointsBuilder AddAuthEndpoints<TUserKey, TUser>(this IServiceCollection services) where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description AuthEndpointsBuilder A AuthEndpointsBuilder for creating and configuring the AuthEndpoints system. Type Parameters Name Description TUserKey TUser | Improve this Doc View Source AddAuthEndpoints<TUserKey, TUser>(IServiceCollection, Action<AuthEndpointsOptions>) Adds and configures the AuthEndpoints core system. Declaration public static AuthEndpointsBuilder AddAuthEndpoints<TUserKey, TUser>(this IServiceCollection services, Action<AuthEndpointsOptions> setup) where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The services available in the application. Action < AuthEndpointsOptions > setup An action to configure the AuthEndpointsOptions . Returns Type Description AuthEndpointsBuilder A AuthEndpointsBuilder for creating and configuring the AuthEndpoints system. Type Parameters Name Description TUserKey The type representing a User's primary key in the system. TUser The type representing a User in the system. | Improve this Doc View Source AddAuthEndpointsCore<TUserKey, TUser>(IServiceCollection) Adds the AuthEndpoints core services Declaration public static AuthEndpointsBuilder AddAuthEndpointsCore<TUserKey, TUser>(this IServiceCollection services) where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description AuthEndpointsBuilder A AuthEndpointsBuilder for creating and configuring the AuthEndpoints system. Type Parameters Name Description TUserKey TUser | Improve this Doc View Source AddAuthEndpointsCore<TUserKey, TUser>(IServiceCollection, Action<AuthEndpointsOptions>) Adds and configures the AuthEndpoints core system. Declaration public static AuthEndpointsBuilder AddAuthEndpointsCore<TUserKey, TUser>(this IServiceCollection services, Action<AuthEndpointsOptions> setup) where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The services available in the application. Action < AuthEndpointsOptions > setup An action to configure the AuthEndpointsOptions . Returns Type Description AuthEndpointsBuilder A AuthEndpointsBuilder for creating and configuring the AuthEndpoints system. Type Parameters Name Description TUserKey The type representing a User's primary key in the system. TUser The type representing a User in the system."
  },
  "api/AuthEndpoints.Services.DefaultAuthenticator-1.html": {
    "href": "api/AuthEndpoints.Services.DefaultAuthenticator-1.html",
    "title": "Class DefaultAuthenticator<TUser> | AuthEndpoints",
    "keywords": "Class DefaultAuthenticator<TUser> Default authenticator. Inheritance System.Object DefaultAuthenticator<TUser> Implements IAuthenticator <TUser> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultAuthenticator<TUser> : IAuthenticator<TUser> where TUser : class Type Parameters Name Description TUser Constructors | Improve this Doc View Source DefaultAuthenticator(UserManager<TUser>, IJwtFactory, IClaimsProvider<TUser>, IOptions<AuthEndpointsOptions>) Declaration public DefaultAuthenticator(UserManager<TUser> userManager, IJwtFactory jwtFactory, IClaimsProvider<TUser> claimsProvider, IOptions<AuthEndpointsOptions> options) Parameters Type Name Description Microsoft.AspNetCore.Identity.UserManager <TUser> userManager IJwtFactory jwtFactory IClaimsProvider <TUser> claimsProvider Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options Methods | Improve this Doc View Source Authenticate(String, String) Use this method to verify a set of credentials. It takes credentials as argument, username and password for the default case. Declaration public async Task<TUser> Authenticate(string username, string password) Parameters Type Name Description System.String username System.String password Returns Type Description Task <TUser> An instance of TUser if credentials are valid | Improve this Doc View Source Login(TUser) Use this method to get an access Token and a refresh Token for the given TUser Declaration public Task<AuthenticatedUserResponse> Login(TUser user) Parameters Type Name Description TUser user Returns Type Description Task < AuthenticatedUserResponse > An instance of AuthenticatedUserResponse , containing an access Token and a refresh Token Implements IAuthenticator<TUser>"
  },
  "api/AuthEndpoints.Services.DefaultClaimsProvider-2.html": {
    "href": "api/AuthEndpoints.Services.DefaultClaimsProvider-2.html",
    "title": "Class DefaultClaimsProvider<TUserKey, TUser> | AuthEndpoints",
    "keywords": "Class DefaultClaimsProvider<TUserKey, TUser> Use DefaultClaimsProvider<TUserKey, TUser> to get access token claims and refresh token claims Inheritance System.Object DefaultClaimsProvider<TUserKey, TUser> Implements IClaimsProvider <TUser> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultClaimsProvider<TUserKey, TUser> : IClaimsProvider<TUser> where TUserKey : IEquatable<TUserKey> where TUser : IdentityUser<TUserKey> Type Parameters Name Description TUserKey TUser Methods | Improve this Doc View Source provideAccessClaims(TUser) Provide claims for access token Declaration public IList<Claim> provideAccessClaims(TUser user) Parameters Type Name Description TUser user Returns Type Description IList < System.Security.Claims.Claim > | Improve this Doc View Source provideRefreshClaims(TUser) Provide claims for refresh token Declaration public IList<Claim> provideRefreshClaims(TUser user) Parameters Type Name Description TUser user Returns Type Description IList < System.Security.Claims.Claim > Implements IClaimsProvider<TUser>"
  },
  "api/AuthEndpoints.Services.DefaultEmailSender.html": {
    "href": "api/AuthEndpoints.Services.DefaultEmailSender.html",
    "title": "Class DefaultEmailSender | AuthEndpoints",
    "keywords": "Class DefaultEmailSender Use this class to send an email using smtp client configured by EmailOptions . Inheritance System.Object DefaultEmailSender Implements IEmailSender Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultEmailSender : IEmailSender Constructors | Improve this Doc View Source DefaultEmailSender(IOptions<AuthEndpointsOptions>) Declaration public DefaultEmailSender(IOptions<AuthEndpointsOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options Methods | Improve this Doc View Source SendEmail(MimeMessage) Declaration public void SendEmail(MimeMessage message) Parameters Type Name Description MimeKit.MimeMessage message | Improve this Doc View Source SendEmailAsync(MimeMessage) Declaration public async Task SendEmailAsync(MimeMessage message) Parameters Type Name Description MimeKit.MimeMessage message Returns Type Description Task Implements IEmailSender"
  },
  "api/AuthEndpoints.Services.DefaultJwtFactory.html": {
    "href": "api/AuthEndpoints.Services.DefaultJwtFactory.html",
    "title": "Class DefaultJwtFactory | AuthEndpoints",
    "keywords": "Class DefaultJwtFactory Use DefaultJwtFactory to create a jwt. Inheritance System.Object DefaultJwtFactory Implements IJwtFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultJwtFactory : IJwtFactory Constructors | Improve this Doc View Source DefaultJwtFactory(JwtSecurityTokenHandler) Declaration public DefaultJwtFactory(JwtSecurityTokenHandler tokenHandler) Parameters Type Name Description System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler tokenHandler Methods | Improve this Doc View Source Create(SecurityKey, String, JwtPayload) Use this method to create a jwt Declaration public string Create(SecurityKey key, string algorithm, JwtPayload payload) Parameters Type Name Description Microsoft.IdentityModel.Tokens.SecurityKey key System.String algorithm System.IdentityModel.Tokens.Jwt.JwtPayload payload Returns Type Description System.String a jwt in string Implements IJwtFactory"
  },
  "api/AuthEndpoints.Services.DefaultJwtValidator.html": {
    "href": "api/AuthEndpoints.Services.DefaultJwtValidator.html",
    "title": "Class DefaultJwtValidator | AuthEndpoints",
    "keywords": "Class DefaultJwtValidator Use DefaultJwtValidator to validate a jwt Inheritance System.Object DefaultJwtValidator Implements IJwtValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultJwtValidator : IJwtValidator Constructors | Improve this Doc View Source DefaultJwtValidator(JwtSecurityTokenHandler) Declaration public DefaultJwtValidator(JwtSecurityTokenHandler tokenHandler) Parameters Type Name Description System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler tokenHandler Methods | Improve this Doc View Source ReadJwtToken(String) Read jwt from the given string Declaration public JwtSecurityToken ReadJwtToken(string token) Parameters Type Name Description System.String token Returns Type Description System.IdentityModel.Tokens.Jwt.JwtSecurityToken An instance of JwtSecurityToken | Improve this Doc View Source Validate(String, TokenValidationParameters) Use this method to validate a jwt Declaration public bool Validate(string token, TokenValidationParameters validationParameters) Parameters Type Name Description System.String token Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters Returns Type Description System.Boolean a boolean, return true if valid | Improve this Doc View Source ValidateAsync(String, TokenValidationParameters) Declaration public async Task<bool> ValidateAsync(string token, TokenValidationParameters validationParameters) Parameters Type Name Description System.String token Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters Returns Type Description Task < System.Boolean > Implements IJwtValidator"
  },
  "api/AuthEndpoints.Services.DefaultMessageFactory.html": {
    "href": "api/AuthEndpoints.Services.DefaultMessageFactory.html",
    "title": "Class DefaultMessageFactory | AuthEndpoints",
    "keywords": "Class DefaultMessageFactory Use this class to create MimeMessage for email verification request and for reset password request. Inheritance System.Object DefaultMessageFactory Implements IEmailFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public class DefaultMessageFactory : IEmailFactory Constructors | Improve this Doc View Source DefaultMessageFactory(IOptions<AuthEndpointsOptions>) Declaration public DefaultMessageFactory(IOptions<AuthEndpointsOptions> options) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < AuthEndpointsOptions > options Methods | Improve this Doc View Source Create2faEmail(EmailData) Declaration public MimeMessage Create2faEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateConfirmationEmail(EmailData) Use this method to create MimeMessage for email verification request Declaration public MimeMessage CreateConfirmationEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage a instance of MimeMessage | Improve this Doc View Source CreateEnable2faEmail(EmailData) Declaration public MimeMessage CreateEnable2faEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateResetPasswordEmail(EmailData) Use this method to create MimeMessage for reset password request Declaration public MimeMessage CreateResetPasswordEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage a instance of MimeMessage Implements IEmailFactory"
  },
  "api/AuthEndpoints.Services.html": {
    "href": "api/AuthEndpoints.Services.html",
    "title": "Namespace AuthEndpoints.Services | AuthEndpoints",
    "keywords": "Namespace AuthEndpoints.Services Classes DefaultAuthenticator<TUser> Default authenticator. DefaultClaimsProvider<TUserKey, TUser> Use DefaultClaimsProvider<TUserKey, TUser> to get access token claims and refresh token claims DefaultEmailSender Use this class to send an email using smtp client configured by EmailOptions . DefaultJwtFactory Use DefaultJwtFactory to create a jwt. DefaultJwtValidator Use DefaultJwtValidator to validate a jwt DefaultMessageFactory Use this class to create MimeMessage for email verification request and for reset password request. RsaSignedJwtFactory Use RsaSignedJwtFactory to create a jwt with RS256 signature. Interfaces IAuthenticator<TUser> Implements IAuthenticator<TUser> to define your authenticator IClaimsProvider<TUser> Implements IClaimsProvider<TUser> to define your claims provider IEmailFactory IEmailSender IJwtFactory Implements IJwtFactory to define your jwt generator IJwtValidator Implements IJwtValidator to define your jwt validator"
  },
  "api/AuthEndpoints.Services.IAuthenticator-1.html": {
    "href": "api/AuthEndpoints.Services.IAuthenticator-1.html",
    "title": "Interface IAuthenticator<TUser> | AuthEndpoints",
    "keywords": "Interface IAuthenticator<TUser> Implements IAuthenticator<TUser> to define your authenticator Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IAuthenticator<TUser> where TUser : class Type Parameters Name Description TUser Methods | Improve this Doc View Source Authenticate(String, String) Implements this method to verify a set of credentials, username and password for the default case Declaration Task<TUser> Authenticate(string username, string password) Parameters Type Name Description System.String username System.String password Returns Type Description Task <TUser> An instance of TUser if credentials are valid, else return null | Improve this Doc View Source Login(TUser) Implements this method to log a user in Declaration Task<AuthenticatedUserResponse> Login(TUser user) Parameters Type Name Description TUser user Returns Type Description Task < AuthenticatedUserResponse > An instance of AuthenticatedUserResponse"
  },
  "api/AuthEndpoints.Services.IClaimsProvider-1.html": {
    "href": "api/AuthEndpoints.Services.IClaimsProvider-1.html",
    "title": "Interface IClaimsProvider<TUser> | AuthEndpoints",
    "keywords": "Interface IClaimsProvider<TUser> Implements IClaimsProvider<TUser> to define your claims provider Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IClaimsProvider<TUser> where TUser : class Type Parameters Name Description TUser Methods | Improve this Doc View Source provideAccessClaims(TUser) Use this method to get a list of claims for the given user Declaration IList<Claim> provideAccessClaims(TUser user) Parameters Type Name Description TUser user Returns Type Description IList < System.Security.Claims.Claim > | Improve this Doc View Source provideRefreshClaims(TUser) Use this method to get a list of claims for the given user Declaration IList<Claim> provideRefreshClaims(TUser user) Parameters Type Name Description TUser user Returns Type Description IList < System.Security.Claims.Claim >"
  },
  "api/AuthEndpoints.Services.IEmailFactory.html": {
    "href": "api/AuthEndpoints.Services.IEmailFactory.html",
    "title": "Interface IEmailFactory | AuthEndpoints",
    "keywords": "Interface IEmailFactory Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IEmailFactory Methods | Improve this Doc View Source Create2faEmail(EmailData) Declaration MimeMessage Create2faEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateConfirmationEmail(EmailData) Declaration MimeMessage CreateConfirmationEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateEnable2faEmail(EmailData) Declaration MimeMessage CreateEnable2faEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage | Improve this Doc View Source CreateResetPasswordEmail(EmailData) Declaration MimeMessage CreateResetPasswordEmail(EmailData data) Parameters Type Name Description EmailData data Returns Type Description MimeKit.MimeMessage"
  },
  "api/AuthEndpoints.Services.IEmailSender.html": {
    "href": "api/AuthEndpoints.Services.IEmailSender.html",
    "title": "Interface IEmailSender | AuthEndpoints",
    "keywords": "Interface IEmailSender Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IEmailSender Methods | Improve this Doc View Source SendEmail(MimeMessage) Declaration void SendEmail(MimeMessage message) Parameters Type Name Description MimeKit.MimeMessage message | Improve this Doc View Source SendEmailAsync(MimeMessage) Declaration Task SendEmailAsync(MimeMessage message) Parameters Type Name Description MimeKit.MimeMessage message Returns Type Description Task"
  },
  "api/AuthEndpoints.Services.IJwtFactory.html": {
    "href": "api/AuthEndpoints.Services.IJwtFactory.html",
    "title": "Interface IJwtFactory | AuthEndpoints",
    "keywords": "Interface IJwtFactory Implements IJwtFactory to define your jwt generator Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IJwtFactory Methods | Improve this Doc View Source Create(SecurityKey, String, JwtPayload) Method for creating a jwt Declaration string Create(SecurityKey key, string algorithm, JwtPayload payload) Parameters Type Name Description Microsoft.IdentityModel.Tokens.SecurityKey key System.String algorithm System.IdentityModel.Tokens.Jwt.JwtPayload payload Returns Type Description System.String"
  },
  "api/AuthEndpoints.Services.IJwtValidator.html": {
    "href": "api/AuthEndpoints.Services.IJwtValidator.html",
    "title": "Interface IJwtValidator | AuthEndpoints",
    "keywords": "Interface IJwtValidator Implements IJwtValidator to define your jwt validator Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public interface IJwtValidator Methods | Improve this Doc View Source ReadJwtToken(String) Declaration JwtSecurityToken ReadJwtToken(string token) Parameters Type Name Description System.String token Returns Type Description System.IdentityModel.Tokens.Jwt.JwtSecurityToken | Improve this Doc View Source Validate(String, TokenValidationParameters) Declaration bool Validate(string token, TokenValidationParameters validationParameters) Parameters Type Name Description System.String token Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters Returns Type Description System.Boolean | Improve this Doc View Source ValidateAsync(String, TokenValidationParameters) Declaration Task<bool> ValidateAsync(string token, TokenValidationParameters validationParameters) Parameters Type Name Description System.String token Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters Returns Type Description Task < System.Boolean >"
  },
  "api/AuthEndpoints.Services.RsaSignedJwtFactory.html": {
    "href": "api/AuthEndpoints.Services.RsaSignedJwtFactory.html",
    "title": "Class RsaSignedJwtFactory | AuthEndpoints",
    "keywords": "Class RsaSignedJwtFactory Use RsaSignedJwtFactory to create a jwt with RS256 signature. Inheritance System.Object RsaSignedJwtFactory Implements IJwtFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AuthEndpoints.Services Assembly : AuthEndpoints.Core.dll Syntax public class RsaSignedJwtFactory : IJwtFactory Constructors | Improve this Doc View Source RsaSignedJwtFactory(JwtSecurityTokenHandler) Declaration public RsaSignedJwtFactory(JwtSecurityTokenHandler tokenHandler) Parameters Type Name Description System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler tokenHandler Methods | Improve this Doc View Source Create(SecurityKey, String, JwtPayload) Declaration public string Create(SecurityKey key, string algorithm, JwtPayload payload) Parameters Type Name Description Microsoft.IdentityModel.Tokens.SecurityKey key System.String algorithm System.IdentityModel.Tokens.Jwt.JwtPayload payload Returns Type Description System.String Implements IJwtFactory"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | AuthEndpoints",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "index.html": {
    "href": "index.html",
    "title": "AuthEndpoints | AuthEndpoints",
    "keywords": "AuthEndpoints A simple jwt authentication library for ASP.Net 6. AuthEndpoints library provides a set of API controllers to handle basic web & JWT authentication actions such as registration, login, reset password, etc. It works with custom identity user model . AuthEndpoints is built with the aim of increasing developer productivity. Installing via NuGet The easiest way to install AuthEndpoints is via NuGet Install the library using the following .net cli command: dotnet add package AuthEndpoints or in Visual Studio's Package Manager Console, enter the following command: Install-Package AuthEndpoints Get started Contributing Your contributions are always welcome! simply send a pull request! The up-for-grabs label is a great place to start. If you find a flaw, please open an issue or a PR and let's sort things out. The documentation is far from perfect so every bit of help is more than welcome."
  },
  "wiki/2fa-endpoints.html": {
    "href": "wiki/2fa-endpoints.html",
    "title": "2FA Endpoints | AuthEndpoints",
    "keywords": "2FA Endpoints TwoStepVerificationController<TUserKey, TUser> 2FA Enable Use this endpoint to send email with 2fa token for enabling 2fa. Default URL : /users/enable_2fa Authorizations : (Jwt) Method Request Response GET - HTTP_200_OK, HTTP_400_BAD_REQUEST, HTTP_401_UNAUTHORIZED 2FA Enable Confirm Use this endpoint to finish enabling 2fa process. Default URL : /users/enable_2fa_confirm Authorizations : (Jwt) Method Request Response POST Email Provider Token HTTP_200_OK, HTTP_400_BAD_REQUEST, HTTP_401_UNAUTHORIZED 2FA Login Use this endpoint to login with 2fa process. Default URL : /users/two_step_verification_login Authorizations : (None) Method Request Response POST username password provider HTTP_200_OK HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_404_NOT_FOUND 2FA Login Confirm Use this endpoint to login with 2fa process. Default URL : /users/two_step_verification_confirm Authorizations : (None) Method Request Response POST email provider token HTTP_200_OK HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_404_NOT_FOUND"
  },
  "wiki/authorization.html": {
    "href": "wiki/authorization.html",
    "title": "Simple Authorization | AuthEndpoints",
    "keywords": "Simple Authorization AuthEndpointsBuilder.AddJwtBearerAuthScheme enables JWT-bearer authentication using \"jwt\" scheme. The following code limits access to the MyController to jwt authenticated users: using Microsoft.AspNetCore.Authorization; [Authorize(AuthenticationSchemes = \"jwt\")] public class MyController : ControllerBase {} If you want to apply authorization to an action rather than the controller, apply the AuthorizeAttribute attribute to the action itself: using Microsoft.AspNetCore.Authorization; public class MyController : ControllerBase { public ActionResult Get() {} [Authorize(AuthenticationSchemes = \"jwt\")] public ActionResult Post() {} } Read more about simple authorization at the documentation"
  },
  "wiki/base-endpoints.html": {
    "href": "wiki/base-endpoints.html",
    "title": "Base Endpoints | AuthEndpoints",
    "keywords": "Base Endpoints BaseEndpointsController<TUserKey, TUser> User Create Use this endpoint to register new user. Default URL : /users Authorizations : (None) Method Request Response POST email username password confirmPassword HTTP_200_OK HTTP_400_BAD_REQUEST User Verify Email Use this endpoint to send email verification link via email. You should provide site in your frontend application (configured by AuthEndpointsOptions.EmailConfirmationUrl) which will send POST request to verify email confirmation endpoint. Default URL : /users/verify_email Authorizations : (Jwt) Method Request Response GET - HTTP_204_NO_CONTENT, HTTP_401_UNAUTHORIZED User Verify Email Confirmation Use this endpoint to finish email verification process. Default URL : /users/verify_email_confirm Authorizations : (Jwt or None) Method Request Response POST identity token HTTP_204_NO_CONTENT, HTTP_400_BAD_REQUEST, HTTP_401_UNAUTHORIZED, HTTP_409_CONFLICT User Retrieve Use this endpoint to retrieve the authenticated user data. Default URL : /users/me Authorizations : (Jwt) Method Request Response GET - HTTP_200_OK User data Set Password Use this endpoint to change user password. Default URL : /users/set_password Authorizations : (Jwt) Method Request Response POST currentPassword newPassword confirmNewPassword HTTP_204_NO_CONTENT HTTP_400_BAD_REQUEST Reset Password Use this endpoint to send email to user with password reset link. You should provide site in your frontend application (configured by AuthEndpointsOptions.PasswordResetUrl) which will send POST request to reset password confirmation endpoint. Default URL : /users/reset_password Authorizations : (None) Method Request Response POST Email HTTP_204_NO_CONTENT HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_404_NOT_FOUND Reset Password Confirmation Use this endpoint to finish reset password process. Default URL : /users/reset_password_confirm Authorizations : (None) Method Request Response POST identity token newPassword confirmNewPassword HTTP_204_NO_CONTENT HTTP_400_BAD_REQUEST HTTP_404_NOT_FOUND HTTP_409_CONFLICT"
  },
  "wiki/custom-authenticator.html": {
    "href": "wiki/custom-authenticator.html",
    "title": "Writing an Authenticator | AuthEndpoints",
    "keywords": "Writing an Authenticator By default, AuthEndpoints authenticate users via username. If you want to change this behavior, for example, you want to authenticate a user via email, then you need to write a custom authenticator. Something like this will work: public class MyAuthenticator : IAuthenticator<IdentityUser> { public async Task<IdentityUser?> Authenticate(string email, string password) { var user = await userManager.FindByEmailAsync(email); if (user == null) { return null; } bool correctPassword = await userManager.CheckPasswordAsync(user, password); if (!correctPassword) { return null; } return user; } public Task<AuthenticatedUserResponse> Login(IdentityUser user) { ... } } finally, register it via AuthEndpointsBuilder.AddAuthenticator<>() : var builder = services.AddAuthEndpoints<string, IdentityUser>(); builder.AddAuthenticator<MyAuthenticator>();"
  },
  "wiki/custom-claims.html": {
    "href": "wiki/custom-claims.html",
    "title": "Token Claims | AuthEndpoints",
    "keywords": "Token Claims JSON web tokens (JWTs) claims are pieces of information asserted about a subject. In a JWT, a claim appears as a name/value pair where the name is always a string and the value can be any JSON value. Generally, when we talk about a claim in the context of a JWT, we are referring to the name (or key). By default AuthEndpoints add 2 custom claims to an access token, user id and username. And add 1 custom claim to a refresh token, user id. To change this, you can write a custom claims provider. Something like this will work: public class MyClaimsProvider : IClaimsProvider<MyApplicationUser> { public IList<Claim> provideAccessClaims(TUser user) { return new List<Claim>() { new Claim(\"id\", user.Id.ToString()!), new Claim(ClaimTypes.Name, user.UserName), }; } public IList<Claim> provideRefreshClaims(TUser user) { return new List<Claim>() { new Claim(\"id\", user.Id.ToString()!), new Claim(ClaimTypes.Name, user.UserName), }; } } then, add it using AuthEndpointsBuilder.AddClaimsProvider<>(); builder.AddClaimsProvider<MyClaimsProvider>();"
  },
  "wiki/custom-identity-user.html": {
    "href": "wiki/custom-identity-user.html",
    "title": "Working with Custom Identity User | AuthEndpoints",
    "keywords": "Working with Custom Identity User For AuthEndpoints to work with custom identity user, you need to specify the key type for TUserKey and the custom user class for TUser on AddAuthEndpoints<TUserKey, TUser>() . For example, my custom identity user: public class MyApplicationUser : IdentityUser<Guid> { public string Nickname { get; set; } } Then, you can simply specify the key type for TUserKey and the custom class for TUser : services.AddAuthEndpoints<Guid, MyApplicationUser>();"
  },
  "wiki/email-config.html": {
    "href": "wiki/email-config.html",
    "title": "Email Backend | AuthEndpoints",
    "keywords": "Email Backend AuthEndpoints library uses MailKit library for the creation and parsing of messages, and sending an email. Learn more about MailKit here Configuring Email Settings You can configure email backend settings via AuthEndpointsOptions , for example: builder.Services.AddAuthEndpoints<string, IdentityUser>(options => { ... // URL to your frontend email verification page. It should contain {uid} and {token} options.EmailConfirmationUrl = \"https://myfrontend.com/account/verify-email/{uid}/{token}\"; // URL to your frontend password reset page. It should contain {uid} and {token} options.PasswordResetUrl = \"https://myfrontend.com/account/password-reset/{uid}/{token}\"; options.EmailOptions = new EmailOptions() { From = \"your@gmail.com\", Host = \"smtp.gmail.com\", Port = 587, User = \"<gmail_app_user>\", Password = \"<gmail_app_password>\", } }) .AddJwtBearerAuthScheme(...); Custom Email Factory You can customize the content of the email by implementing IEmailFactory, for example: public class MyEmailFactory : IEmailFactory { // returns a MimeMessage that will be sendt by the IEmailSender. public MimeMessage CreateConfirmationEmail(EmailData data); // returns a MimeMessage that will be sent by the IEmailSender. public MimeMessage CreateResetPasswordEmail(EmailData data); } then register it via AuthEndpointsBuilder.AddEmailFactory : builder.AddEmailFactory<MyEmailFactory>(); Learn more about creating a MIME messages using MimeKit here Custom Email Sender The default implementation of IEmailSender , DefaultEmailSender uses SmtpClient to send an email. You can write your own email sender by implementing IEmailSender , for example: public class MyEmailSender : IEmailSender { public void SendEmail(MimeMessage message); public void SendEmailAsync(MimeMessage message); } then register it via AuthEndpointsBuilder.AddEmailSender : builder.AddEmailSender<MyEmailSender>(); Learn more about using MailKit here"
  },
  "wiki/encryption-type.html": {
    "href": "wiki/encryption-type.html",
    "title": "Configuring Enryption Type | AuthEndpoints",
    "keywords": "Configuring Enryption Type AuthEndpoints default options for signing and validating jwts use a single security key, this is being called a symmetric encryption. Distributing the key in a secure way is one of the primary challenges of this encryption type, this also known as key distribution problem. Symmetric enryption allows anyone that has access to the key that the token was encrypted with, can also decrypt it. To use symmetric HMAC signing and verification, the following algorithms may be used: 'HS256', 'HS384', 'HS512'. When an HMAC algorithm is chosen, the SecurityKey in AccessSigningOptions and RefreshSigningOptions will be used as both the signing key and the verifying key. Asymmetric Encryption On the other hand, Asymmetric Encryption is based on two keys, a public key, and a private key. The public key is used to validate jwt. And the private key is used to sign the jwt. To use asymmetric RSA signing and verification, the following algorithms may be used: 'RS256', 'RS384', 'RS512'. When an RSA algorithm is chosen, the SigningKey setting must be set to an RsaSecurityKey that contains an RSA private key. Likewise, the TokenValidationParammeters setting must be set to an RsaSecurityKey that contains an RSA public key. using var privateRsa = RSA.Create(); using var publicRsa = RSA.Create(); privateRsa.FromXmlString(\"<your_private_key>\"); publicRsa.FromXmlString(\"<your_public_key>\"); var accessValidationParam = new TokenValidationParameters() { IssuerSigningKey = new RsaSecurityKey(publicRsa), // Verify with public key ValidIssuer = \"https://localhost:8000\", ValidAudience = \"https://localhost:8000\", ValidateIssuerSigningKey = true, ClockSkew = TimeSpan.Zero, }; builder.Services.AddAuthEndpoints<string, MyCustomIdentityUser>(new AuthEndpointsOptions() { // Use private keys for signing options AccessSigningOptions = new JwtSigningOptions() { SigningKey = new RsaSecurityKey(privateRsa), // Sign with private key Algorithm = SecurityAlgorithms.RsaSha256, // Use \"RS256\" algorithm ExpirationMinutes = 120, }, RefreshSigningOptions = new JwtSigningOptions() { SigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"<private_key>\")), Algorithm = SecurityAlgorithms.HmacSha256, ExpirationMinutes = 120, }, Audience = \"https://localhost:8000\", Issuer = \"https://localhost:8000\", // AccessValidationParameters will be used for verifying access jwts AccessValidationParameters = accessValidationParam }) .AddJwtBearerAuthScheme(accessValidationParam); // Verify with public key"
  },
  "wiki/get-started.html": {
    "href": "wiki/get-started.html",
    "title": "Getting started | AuthEndpoints",
    "keywords": "Getting started Follow steps below to install and use AuthEndpoints. Create a project Create a web api ASP.NET Core project dotnet new webapi -n MyNewWebApp Install nuget package Install the library using the following .net cli command: dotnet add package AuthEndpoints.MinimalApi or with nuget package manager: Install-Package AuthEndpoints.MinimalApi Quick Start First, let's create MyDbContext : // Data/MyDbContext.cs using Microsoft.EntityFrameworkCore; namespace MyNewWebApp.Data; public class MyDbContext : DbContext { public MyDbContext(DbContextOptions<MyDbContext> options) : base(options) { } } Configure database provider for MyDbContext and then add the required identity services: // Program.cs builder.Services.AddDbContext<MyDbContext>(options => { // Configure database provider for `MyDbContext` }); builder.Services .AddIdentityCore<IdentityUser>() // <-- or `AddIdentity<,>` .AddEntityFrameworkStores<MyDbContext>() // <-- required .AddDefaultTokenProviders(); // <-- required Next, let's add auth endpoints services and jwt bearer authentication scheme: // Program.cs builder.Services // When no options provided, // AuthEndpoints will automatically create a secret key and use single security key // for each access jwt and refresh jwt (symmetric encryption). // Secrets will be created under `keys/` directory. .AddAuthEndpoints<string, IdentityUser>() // <TUserKey, TUser> .AddAllEndpointDefinitions() // Add endpoint definitions .AddJwtBearerAuthScheme(); then finally, call app.MapAuthEndpoints() before app.Run() : // Program.cs ... var app = builder.Build(); ... app.UseAuthentication(); app.UseAuthorization(); ... app.MapAuthEndpoints(); // <-- app.Run(); Run it and you should see auth endpoints available on swagger docs! Full Source Code // Program.cs using AuthEndpoints; using AuthEndpoints.MinimalApi; using Microsoft.AspNetCore.Identity; using MyNewWebApp.Data; var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); builder.Services.AddDbContext<MyDbContext>(options => { // Configure database provider for `MyDbContext` here // ... }); builder.Services .AddIdentityCore<IdentityUser>() .AddEntityFrameworkStores<MyDbContext>() .AddDefaultTokenProviders(); builder.Services // When no options provided, // AuthEndpoints will automatically create a secret key and use single security key // for each access jwt and refresh jwt (symmetric encryption). // Secrets will be created under `keys/` directory. .AddAuthEndpoints<string, IdentityUser>() .AddAllEndpointDefinitions() // Add endpoint definitions .AddJwtBearerAuthScheme(); // Add jwt bearer auth var app = builder.Build(); // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI(); } app.UseHttpsRedirection(); app.UseAuthentication(); app.UseAuthorization(); app.MapControllers(); app.MapAuthEndpoints(); // <-- Map minimal api endpoints app.Run(); Available Endpoints Basic authentication endpoints JWT endpoints 2FA endpoints"
  },
  "wiki/jwt-endpoints.html": {
    "href": "wiki/jwt-endpoints.html",
    "title": "JWT Endpoints | AuthEndpoints",
    "keywords": "JWT Endpoints JwtController<TUserKey, TUser> JWT Create Use this endpoint to obtain jwt. Default URL : /jwt/create Authorizations : (Jwt or None) Method Request Response POST username password HTTP_200_OK accessToken refreshToken HTTP_401_UNAUTHORIZED JWT Refresh Use this endpoint to refresh jwt. Default URL : /jwt/refresh Authorizations : (Jwt) Method Request Response POST refreshToken HTTP_200_OK User data JWT Verify Use this endpoint to verify access jwt. Default URL : /users/set_password Authorizations : (Jwt) Method Request Response GET - HTTP_200_OK HTTP_401_UNAUTHORIZED"
  }
}